// {{.Name}}Raw corresponds to C type {{.CType}}
type {{.Name}}Raw C.{{.CType}}

// {{.Name}}RawFromUnsafe creates a {{.Name}}Raw from an unsafe pointer to {{.CType}}
func {{.Name}}RawFromUnsafe(p unsafe.Pointer) *{{.Name}}Raw {
	return (*{{.Name}}Raw)(p)
}

type {{.Name}} struct {
{{range .Members}}	{{.Name}} {{.GoType}}
{{end -}}
}

func CNew{{.Name}}() *{{.Name}} {
  return (*{{.Name}})(C.malloc(C.sizeof_{{.CType}}))
}

func CNew{{.Name}}Array(size int) []{{.Name}} {
  ptr := (*{{.Name}})(C.malloc(C.size_t(size) * C.sizeof_{{.CType}}))
  return unsafe.Slice(ptr, size)
}

func CFree{{.Name}}(p *{{.Name}}) {
  C.free(unsafe.Pointer(p))
}

// ToRaw converts {{.Name}} to a {{.Name}}Raw
func (me *{{.Name}}) ToRaw() ({{.Name}}Raw, func()) {
{{range .Members}}{{if ne .GoToCGo.Def ""}}  {{.GoToCGo.Def}}
{{end}}{{end}}
	raw := {{.Name}}Raw{}
{{range .Members}}	raw.{{.CName}} = {{.GoToCGo.Use}}
{{end}}
	return raw, func() {
{{range .Members}}{{if ne .GoToCGo.Free ""}}    {{.GoToCGo.Free}}
{{end}}{{end}}  }
}
