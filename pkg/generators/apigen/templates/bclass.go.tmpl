{{template "preamble"}}

import (
  "unsafe"

  "github.com/LouisBrunner/go-dot-extension/pkg/gdc"
)

{{$Class := mapClass .Name -}}
type {{$Class}} struct {
  iface gdc.Interface
  ptr gdc.TypePtr
}

{{- template "class_enums" .}}

{{- define "function_name"}}
{{- if .Arguments}}From{{- range .Arguments}}{{pascalCased (mapType .Type)}}{{end}}{{else}}{{end}}
{{- end}}

// Constructors
{{- range .Constructors}}

func New{{$Class}}{{template "function_name" .}}({{range .Arguments}}{{mapName .Name}} {{mapType .Type}}, {{end}}) {{$Class}} {
  ptr := (gdc.UninitializedTypePtr)(cmalloc(classSize{{$Class}}))
  ctr := giface.VariantGetPtrConstructor(gdc.VariantType{{pascalCased $.Name}}, {{.Index}}) // FIXME: should cache?
  giface.CallPtrConstructor(ctr, ptr, unsafe.SliceData([]gdc.ConstTypePtr{
    {{- range .Arguments}}
{{- if isExported (mapType .Type) -}}
  {{mapName .Name}}.AsCTypePtr()
{{- else -}}
  gdc.ConstTypePtr(&{{mapName .Name}})
{{- end -}}
    , {{ end -}}
  }))
  return {{$Class}}{
    iface: giface,
    ptr: gdc.TypePtr(ptr),
  }
}
{{- end}}

// Destructor
func (me *{{$Class}}) Destroy() {
  if me.ptr == nil {
    return
  }
{{- if .HasDestructor}}
  dtr := me.iface.VariantGetPtrDestructor(gdc.VariantType{{$Class}})
	me.iface.CallPtrDestructor(dtr, gdc.TypePtr(me.ptr))
{{- end}}
	cfree(unsafe.Pointer(me.ptr))
  me.ptr = nil
}

func (me *{{$Class}}) Type() gdc.VariantType {
  return gdc.VariantType{{pascalCased $.Name}}
}

func (me *{{$Class}}) AsTypePtr() gdc.TypePtr {
  return gdc.TypePtr(me.ptr)
}

func (me *{{$Class}}) AsCTypePtr() gdc.ConstTypePtr {
  return gdc.ConstTypePtr(me.ptr)
}

// Methods
{{- range .Methods}}

func {{if .IsStatic }}{{$Class}}{{else}}(me *{{$Class}}) {{end }}{{mapMethod .Name -}}
({{range .Arguments}}{{mapName .Name}} {{mapType .Type}}, {{end}}) {{mapType .ReturnType}} {
  name := StringNameFromStr("{{.Name}}")
  defer name.Destroy()
  methodPtr := giface.VariantGetPtrBuiltinMethod(gdc.VariantType{{pascalCased $.Name}}, name.AsCPtr(), {{.Hash}}) // FIXME: should cache?

{{if .ReturnType}}  var ret {{mapType .ReturnType}}
{{end}}  args := []gdc.ConstTypePtr{
    {{- range .Arguments}}
{{- if isExported (mapType .Type) -}}
  {{mapName .Name}}.AsCTypePtr()
{{- else -}}
  gdc.ConstTypePtr(&{{mapName .Name}})
{{- end -}}
    , {{ end -}}
  }
  giface.CallPtrBuiltInMethod(methodPtr, {{if .IsStatic}}nil{{else}}me.AsTypePtr(){{end}}, unsafe.SliceData(args), {{if .ReturnType}}gdc.TypePtr(&ret){{else}}nil{{end}}, len(args))
{{if .ReturnType}}  return ret
{{end -}}
}
{{- end}}

// Operators
{{- range .Operators}}

func (me *{{$Class}}) {{mapMethod (mapOperator .Name)}}{{if ne .RightType ""}}{{pascalCased (mapType .RightType)}}{{end -}}
({{if ne .RightType ""}}right {{mapClass .RightType}}{{end}}) {{mapType .ReturnType}} {
  op := me.iface.VariantGetPtrOperatorEvaluator(gdc.VariantOp{{mapOperator .Name}}, me.Type(), {{if ne .RightType ""}}right.Type(){{else}}gdc.VariantTypeNil{{end}}) // FIXME: cache
  var ret {{mapType .ReturnType}}
  me.iface.CallPtrOperatorEvaluator(op, me.AsCTypePtr(), {{if ne .RightType ""}}right.AsCTypePtr(){{else}}nil{{end}}, gdc.TypePtr(&ret))
  return ret
}
{{- end}}

// Members
{{- range .Members}}

func (me *{{$Class}}) {{mapMethod .Name}}() {{mapType .Type}} {
  name := StringNameFromStr("{{.Name}}")
  defer name.Destroy()

  getter := me.iface.VariantGetPtrGetter(me.Type(), name.AsCPtr()) // FIXME: cache
  var ret {{mapType .Type}}
  me.iface.CallPtrGetter(getter, me.AsCTypePtr(), gdc.TypePtr(&ret))
  return ret
}

func (me *{{$Class}}) Set{{pascalCased .Name}}(value {{mapType .Type}}) {
  name := StringNameFromStr("{{.Name}}")
  defer name.Destroy()

  setter := me.iface.VariantGetPtrSetter(me.Type(), name.AsCPtr()) // FIXME: cache
  me.iface.CallPtrSetter(setter, me.AsTypePtr(), gdc.ConstTypePtr(&value))
}
{{- end}}
