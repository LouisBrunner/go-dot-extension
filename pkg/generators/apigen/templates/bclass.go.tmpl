{{template "preamble"}}

import (
  "fmt"
  "runtime"
  "unsafe"

  "github.com/LouisBrunner/go-dot-extension/pkg/gdc"
)

{{$Class := mapClass .Name -}}
type {{$Class}} struct {
  data   *[classSize{{$Class}}]byte
  iface  gdc.Interface
  pinner runtime.Pinner
}

{{- template "class_enums" .}}

{{- define "function_name"}}
{{- if .Arguments}}From{{- range .Arguments}}{{pascalCased (mapType .Type)}}{{end}}{{else}}{{end}}
{{- end}}

// Constructors
func new{{$Class}}() *{{$Class}} {
  me := &{{$Class}}{
    data:   new([classSize{{$Class}}]byte),
    iface:  giface,
  }
  me.pinner.Pin(me)
  me.pinner.Pin(me.AsTypePtr())
  return me
}

{{- range .Constructors}}

func New{{$Class}}{{template "function_name" .}}({{range .Arguments}}{{mapName .Name}} {{mapWideType .Type}}, {{end}}) *{{$Class}} {
  pinner := runtime.Pinner{}
  defer pinner.Unpin()
{{- range .Arguments}}
{{- if not (isExported (mapType .Type))}}
  pinner.Pin(&{{mapName .Name}})
{{- end -}}
{{ end}}
  me := new{{$Class}}()
  ctr := me.iface.VariantGetPtrConstructor(gdc.VariantType{{pascalCased $.Name}}, {{.Index}}) // FIXME: should cache?
  me.iface.CallPtrConstructor(ctr, me.asUninitialized(), unsafe.SliceData([]gdc.ConstTypePtr{
    {{- range .Arguments}}
{{- if isExported (mapType .Type) -}}
  {{mapName .Name}}.AsCTypePtr()
{{- else -}}
  gdc.ConstTypePtr(&{{mapName .Name}})
{{- end -}}
    , {{ end -}}
  }))
  return me
}
{{- end}}

// Destructor
func (me *{{$Class}}) Destroy() {
{{- if .HasDestructor}}
  dtr := me.iface.VariantGetPtrDestructor(gdc.VariantType{{$Class}})
	me.iface.CallPtrDestructor(dtr, me.AsTypePtr())
{{- end}}
  me.pinner.Unpin()
}

// Variant support
func (me *Variant) As{{$Class}}() (*{{$Class}}, error) {
	if me.Type() != gdc.VariantType{{pascalCased .Name}} {
		return nil, fmt.Errorf("variant is not a {{$Class}}")
	}
  bclass := new{{$Class}}()
	fn := me.iface.GetVariantToTypeConstructor(me.Type())
	me.iface.CallTypeFromVariantConstructorFunc(fn, bclass.asUninitialized(), me.AsPtr())
	return bclass, nil
}

func (me *{{$Class}}) AsVariant() *Variant {
  va := newVariant()
  va.inner = me
  fn := me.iface.GetVariantFromTypeConstructor(me.Type())
  me.iface.CallVariantFromTypeConstructorFunc(fn, va.asUninitialized(), me.AsTypePtr())
  return va
}

// Pointers
func {{$Class}}FromPtr(ptr gdc.ConstTypePtr) *{{$Class}} {
  me := new{{$Class}}()
  dataFromPtr(me.data[:], ptr)
  return me
}

func (me *{{$Class}}) Type() gdc.VariantType {
  return gdc.VariantType{{pascalCased $.Name}}
}

func (me *{{$Class}}) AsTypePtr() gdc.TypePtr {
  return gdc.TypePtr(unsafe.Pointer(me.data))
}

func (me *{{$Class}}) AsCTypePtr() gdc.ConstTypePtr {
  return gdc.ConstTypePtr(me.AsTypePtr())
}

func (me *{{$Class}}) asUninitialized() gdc.UninitializedTypePtr {
  return gdc.UninitializedTypePtr(me.AsTypePtr())
}
{{if or (eq .Name "bool") (or (eq .Name "int") (eq .Name "float"))}}
func (me *{{$Class}}) Get() {{mapWideType .Name}} {
  return *(*{{mapWideType .Name}})(unsafe.Pointer(me.data))
}
{{end}}
// Methods
{{- range .Methods}}

func {{if .IsStatic }}{{$Class}}{{else}}(me *{{$Class}}) {{end }}{{mapMethod .Name -}}
({{range .Arguments}}{{mapName .Name}} {{mapWideType .Type}}, {{end}}
{{- if .IsVarArg}}varargs ...Variant{{end -}}
) {{mapWideType .ReturnType}} {
  name := StringNameFromStr("{{.Name}}")
  defer name.Destroy()
  methodPtr := giface.VariantGetPtrBuiltinMethod(gdc.VariantType{{pascalCased $.Name}}, name.AsCPtr(), {{.Hash}}) // FIXME: should cache?

{{if .ReturnType}}  ret := New{{mapClass .ReturnType}}()
{{if not (isExported (mapType .ReturnType))}}  defer ret.Destroy(){{end}}
{{end}}{{range $i, $e := .Arguments}}
{{- if not (isExported (mapType .Type))}}  varg{{ $i }} := New{{mapClass .Type}}From{{pascalCased (mapType .Type)}}({{mapName .Name}})
  defer varg{{ $i }}.Destroy()
{{- end}}
{{ end}}  args := []gdc.ConstTypePtr{
    {{- range $i, $e := .Arguments}}
{{- if isExported (mapType .Type) -}}
  {{mapName .Name}}
{{- else -}}
  varg{{ $i }}
{{- end -}}
    .AsCTypePtr(), {{ end -}}
  }
{{if .IsVarArg}}  for _, arg := range varargs {
    args = append(args, arg.AsCTypePtr())
  }{{end}}

  giface.CallPtrBuiltInMethod(methodPtr, {{if .IsStatic}}nil{{else}}me.AsTypePtr(){{end}}, unsafe.SliceData(args), {{if .ReturnType}}ret.AsTypePtr(){{else}}nil{{end}}, len(args))
{{if .ReturnType}}  return {{if isExported (mapType .ReturnType)}}*ret{{else}}ret.Get(){{end}}
{{end -}}
}
{{- end}}

// Operators
{{- range .Operators}}

func (me *{{$Class}}) {{mapMethod (mapOperator .Name)}}{{if ne .RightType ""}}{{pascalCased (mapType .RightType)}}{{end -}}
({{if ne .RightType ""}}{{if isExported (mapType .RightType)}}right{{else}}rightArg{{end}} {{mapWideType .RightType}}{{end}}) {{mapWideType .ReturnType}} {
{{- if ne .RightType ""}}{{if not (isExported (mapType .RightType))}}
  right := New{{mapClass .RightType}}From{{pascalCased (mapType .RightType)}}(rightArg)
  defer right.Destroy()
{{end}}{{end}}
  op := me.iface.VariantGetPtrOperatorEvaluator(gdc.VariantOp{{mapOperator .Name}}, me.Type(), {{if ne .RightType ""}}right.Type(){{else}}gdc.VariantTypeNil{{end}}) // FIXME: cache
  ret := New{{mapClass .ReturnType}}()
  me.iface.CallPtrOperatorEvaluator(op, me.AsCTypePtr(), {{if ne .RightType ""}}right.AsCTypePtr(){{else}}nil{{end}}, ret.AsTypePtr())
  return {{if isExported (mapType .ReturnType)}}*ret{{else}}ret.Get(){{end}}
}
{{- end}}

// Members
{{- range .Members}}

func (me *{{$Class}}) {{mapMethod .Name}}() {{mapWideType .Type}} {
  name := StringNameFromStr("{{.Name}}")
  defer name.Destroy()

  getter := me.iface.VariantGetPtrGetter(me.Type(), name.AsCPtr()) // FIXME: cache
  ret := New{{mapClass .Type}}()
  me.iface.CallPtrGetter(getter, me.AsCTypePtr(), ret.AsTypePtr())
  return {{if isExported (mapType .Type)}}*ret{{else}}ret.Get(){{end}}
}

func (me *{{$Class}}) Set{{pascalCased .Name}}(value {{mapWideType .Type}}) {
  name := StringNameFromStr("{{.Name}}")
  defer name.Destroy()

{{- if isExported (mapType .Type)}}
  valueV := value
{{- else}}
  valueV := New{{mapClass .Type}}From{{pascalCased (mapType .Type)}}(value)
  defer valueV.Destroy()
{{- end}}

  setter := me.iface.VariantGetPtrSetter(me.Type(), name.AsCPtr()) // FIXME: cache
  me.iface.CallPtrSetter(setter, me.AsTypePtr(), valueV.AsCTypePtr())
}
{{- end}}
