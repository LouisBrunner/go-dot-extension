{{template "preamble"}}

import (
  "unsafe"

  "github.com/LouisBrunner/go-dot-extension/pkg/gdc"
)

type UtilityFunctions interface {
{{range .}}  {{mapMethod .Name}}({{if .IsVarArg}}args ...Variant{{else}}{{range .Arguments}}{{mapName .Name}} {{mapWideType .Type}}, {{end}}{{end}}) {{mapWideType .ReturnType}}
{{end -}}
}

type utilities struct {
  iface gdc.Interface
{{range .}}  ptr{{.Name}} gdc.PtrUtilityFunction
{{end -}}
}

func newUtilities(iface gdc.Interface) UtilityFunctions {
{{range .}}  str{{.Name}} := StringNameFromStr("{{.Name}}")
  defer str{{.Name}}.Destroy()
{{end}}  return &utilities{
{{range .}}    ptr{{.Name}}: iface.VariantGetPtrUtilityFunction(str{{.Name}}.AsCPtr(), {{.Hash}}),
{{end}}  }
}

{{- range .}}

func (me *utilities) {{mapMethod .Name}}({{if .IsVarArg}}vargs ...Variant{{else}}{{range .Arguments}}{{mapName .Name}} {{mapWideType .Type}}, {{end}}{{end}}) {{mapWideType .ReturnType}} {
{{if .IsVarArg}}  args := make([]gdc.ConstTypePtr, len(vargs))
  for i, arg := range vargs {
    args[i] = arg.AsCTypePtr()
  }
{{else}}{{range $i, $e := .Arguments}}
{{- if not (isExported (mapType .Type))}}  varg{{ $i }} := New{{mapClass .Type}}From{{pascalCased (mapType .Type)}}({{mapName .Name}})
  defer varg{{ $i }}.Destroy()
{{- end}}
{{ end}}  args := []gdc.ConstTypePtr{
{{- range $i, $e := .Arguments}}
{{- if isExported (mapType .Type) -}}
  {{mapName .Name}}
{{- else -}}
  varg{{ $i }}
{{- end -}}
    .AsCTypePtr(), {{ end -}}
  }
{{- end}}
{{if ne .ReturnType ""}}  ret := New{{mapClass .ReturnType}}()
{{end}}  me.iface.CallPtrUtilityFunction(me.ptr{{.Name}}, {{if eq .ReturnType ""}}nil{{else}}ret.AsTypePtr(){{end}}, unsafe.SliceData(args), len(args))
{{if ne .ReturnType ""}}  return {{if isExported (mapType .ReturnType)}}*ret{{else}}ret.Get(){{end}}{{end}}
}
{{- end -}}
