{{template "preamble"}}

import (
  "github.com/LouisBrunner/go-dot-extension/pkg/gdc"
)

type RealType {{replace .BuildConfiguration "_" ""}}

const (
{{- range .Sizes}}
  classSize{{mapClass .Name}} = {{.Size}}
{{- end }}
)

var bclassToSize = map[gdc.VariantType]int{
{{- range .Sizes}}{{if ne .Name "Variant"}}
  gdc.VariantType{{pascalCased .Name}}: classSize{{mapClass .Name}},
{{- end }}{{ end }}
}

type bclassDefaultConstructorFn func() any

var bclassDefaultConstructor = map[gdc.VariantType]bclassDefaultConstructorFn{
{{- range .Sizes}}{{if ne .Name "Variant"}}{{if ne .Name "Object"}}
  gdc.VariantType{{pascalCased .Name}}: func() any { return New{{mapClass .Name}}() },
{{- end }}{{- end }}{{- end }}
}

type bclassFromVariantFn func(va *Variant) (BClass, error)

var bclassFromVariant = map[gdc.VariantType]bclassFromVariantFn{
{{- range .Sizes}}{{if and (ne .Name "Variant") (and (ne .Name "Object") (ne .Name "Nil")) }}
  gdc.VariantType{{pascalCased .Name}}: func(va *Variant) (BClass, error) { return va.As{{mapClass .Name}}() },
{{- end }}{{- end }}
}

type bclassPtrConstructorFn func(ptr gdc.ConstTypePtr) any

var bclassPtrConstructor = map[gdc.VariantType]bclassPtrConstructorFn{
{{- range .Sizes}}{{if ne .Name "Variant"}}{{if ne .Name "Object"}}
  gdc.VariantType{{pascalCased .Name}}: func(ptr gdc.ConstTypePtr) any { return {{mapClass .Name}}FromPtr(ptr) },
{{- end }}{{- end }}{{- end }}
}

type objectPtrConstructorFn func(ptr gdc.ObjectPtr) any

var objectPtrConstructor = map[string]objectPtrConstructorFn{
{{- range .Classes}}
  "{{.}}": func(ptr gdc.ObjectPtr) any { return createObject(&{{.}}{}, ptr) },
{{- end }}
}
