// Code generated automatically by `go-dot-extension/pkg/gdapi/apigenerator`. DO NOT EDIT.
package gdapi

import (
// TODO: disgusting imports







  "github.com/LouisBrunner/go-dot-extension/pkg/gdc"
)

type RenderingServer struct {
  obj gdc.ObjectPtr
}

func (me *RenderingServer) SetBaseObject(obj gdc.ObjectPtr) {
  me.obj = obj
}

func (me *RenderingServer) BaseClass() string {
  return "RenderingServer"
}



// Constants

var (
  RenderingServerNoIndexArray = "-1" // TODO: construct correctly
  RenderingServerArrayWeightsSize = "4" // TODO: construct correctly
  RenderingServerCanvasItemZMin = "-4096" // TODO: construct correctly
  RenderingServerCanvasItemZMax = "4096" // TODO: construct correctly
  RenderingServerMaxGlowLevels = "7" // TODO: construct correctly
  RenderingServerMaxCursors = "8" // TODO: construct correctly
  RenderingServerMax2DDirectionalLights = "8" // TODO: construct correctly
  RenderingServerMaterialRenderPriorityMin = "-128" // TODO: construct correctly
  RenderingServerMaterialRenderPriorityMax = "127" // TODO: construct correctly
  RenderingServerArrayCustomCount = "4" // TODO: construct correctly
  RenderingServerParticlesEmitFlagPosition = "1" // TODO: construct correctly
  RenderingServerParticlesEmitFlagRotationScale = "2" // TODO: construct correctly
  RenderingServerParticlesEmitFlagVelocity = "4" // TODO: construct correctly
  RenderingServerParticlesEmitFlagColor = "8" // TODO: construct correctly
  RenderingServerParticlesEmitFlagCustom = "16" // TODO: construct correctly
)

// Enums

type RenderingServerTextureLayeredType int
const (
  RenderingServerTextureLayeredTypeTextureLayered2DArray RenderingServerTextureLayeredType = 0
  RenderingServerTextureLayeredTypeTextureLayeredCubemap RenderingServerTextureLayeredType = 1
  RenderingServerTextureLayeredTypeTextureLayeredCubemapArray RenderingServerTextureLayeredType = 2
)

type RenderingServerCubeMapLayer int
const (
  RenderingServerCubeMapLayerCubemapLayerLeft RenderingServerCubeMapLayer = 0
  RenderingServerCubeMapLayerCubemapLayerRight RenderingServerCubeMapLayer = 1
  RenderingServerCubeMapLayerCubemapLayerBottom RenderingServerCubeMapLayer = 2
  RenderingServerCubeMapLayerCubemapLayerTop RenderingServerCubeMapLayer = 3
  RenderingServerCubeMapLayerCubemapLayerFront RenderingServerCubeMapLayer = 4
  RenderingServerCubeMapLayerCubemapLayerBack RenderingServerCubeMapLayer = 5
)

type RenderingServerShaderMode int
const (
  RenderingServerShaderModeShaderSpatial RenderingServerShaderMode = 0
  RenderingServerShaderModeShaderCanvasItem RenderingServerShaderMode = 1
  RenderingServerShaderModeShaderParticles RenderingServerShaderMode = 2
  RenderingServerShaderModeShaderSky RenderingServerShaderMode = 3
  RenderingServerShaderModeShaderFog RenderingServerShaderMode = 4
  RenderingServerShaderModeShaderMax RenderingServerShaderMode = 5
)

type RenderingServerArrayType int
const (
  RenderingServerArrayTypeArrayVertex RenderingServerArrayType = 0
  RenderingServerArrayTypeArrayNormal RenderingServerArrayType = 1
  RenderingServerArrayTypeArrayTangent RenderingServerArrayType = 2
  RenderingServerArrayTypeArrayColor RenderingServerArrayType = 3
  RenderingServerArrayTypeArrayTexUv RenderingServerArrayType = 4
  RenderingServerArrayTypeArrayTexUv2 RenderingServerArrayType = 5
  RenderingServerArrayTypeArrayCustom0 RenderingServerArrayType = 6
  RenderingServerArrayTypeArrayCustom1 RenderingServerArrayType = 7
  RenderingServerArrayTypeArrayCustom2 RenderingServerArrayType = 8
  RenderingServerArrayTypeArrayCustom3 RenderingServerArrayType = 9
  RenderingServerArrayTypeArrayBones RenderingServerArrayType = 10
  RenderingServerArrayTypeArrayWeights RenderingServerArrayType = 11
  RenderingServerArrayTypeArrayIndex RenderingServerArrayType = 12
  RenderingServerArrayTypeArrayMax RenderingServerArrayType = 13
)

type RenderingServerArrayCustomFormat int
const (
  RenderingServerArrayCustomFormatArrayCustomRgba8Unorm RenderingServerArrayCustomFormat = 0
  RenderingServerArrayCustomFormatArrayCustomRgba8Snorm RenderingServerArrayCustomFormat = 1
  RenderingServerArrayCustomFormatArrayCustomRgHalf RenderingServerArrayCustomFormat = 2
  RenderingServerArrayCustomFormatArrayCustomRgbaHalf RenderingServerArrayCustomFormat = 3
  RenderingServerArrayCustomFormatArrayCustomRFloat RenderingServerArrayCustomFormat = 4
  RenderingServerArrayCustomFormatArrayCustomRgFloat RenderingServerArrayCustomFormat = 5
  RenderingServerArrayCustomFormatArrayCustomRgbFloat RenderingServerArrayCustomFormat = 6
  RenderingServerArrayCustomFormatArrayCustomRgbaFloat RenderingServerArrayCustomFormat = 7
  RenderingServerArrayCustomFormatArrayCustomMax RenderingServerArrayCustomFormat = 8
)

type RenderingServerArrayFormat int
const (
  RenderingServerArrayFormatArrayFormatVertex RenderingServerArrayFormat = 1
  RenderingServerArrayFormatArrayFormatNormal RenderingServerArrayFormat = 2
  RenderingServerArrayFormatArrayFormatTangent RenderingServerArrayFormat = 4
  RenderingServerArrayFormatArrayFormatColor RenderingServerArrayFormat = 8
  RenderingServerArrayFormatArrayFormatTexUv RenderingServerArrayFormat = 16
  RenderingServerArrayFormatArrayFormatTexUv2 RenderingServerArrayFormat = 32
  RenderingServerArrayFormatArrayFormatCustom0 RenderingServerArrayFormat = 64
  RenderingServerArrayFormatArrayFormatCustom1 RenderingServerArrayFormat = 128
  RenderingServerArrayFormatArrayFormatCustom2 RenderingServerArrayFormat = 256
  RenderingServerArrayFormatArrayFormatCustom3 RenderingServerArrayFormat = 512
  RenderingServerArrayFormatArrayFormatBones RenderingServerArrayFormat = 1024
  RenderingServerArrayFormatArrayFormatWeights RenderingServerArrayFormat = 2048
  RenderingServerArrayFormatArrayFormatIndex RenderingServerArrayFormat = 4096
  RenderingServerArrayFormatArrayFormatBlendShapeMask RenderingServerArrayFormat = 7
  RenderingServerArrayFormatArrayFormatCustomBase RenderingServerArrayFormat = 13
  RenderingServerArrayFormatArrayFormatCustomBits RenderingServerArrayFormat = 3
  RenderingServerArrayFormatArrayFormatCustom0Shift RenderingServerArrayFormat = 13
  RenderingServerArrayFormatArrayFormatCustom1Shift RenderingServerArrayFormat = 16
  RenderingServerArrayFormatArrayFormatCustom2Shift RenderingServerArrayFormat = 19
  RenderingServerArrayFormatArrayFormatCustom3Shift RenderingServerArrayFormat = 22
  RenderingServerArrayFormatArrayFormatCustomMask RenderingServerArrayFormat = 7
  RenderingServerArrayFormatArrayCompressFlagsBase RenderingServerArrayFormat = 25
  RenderingServerArrayFormatArrayFlagUse2DVertices RenderingServerArrayFormat = 33554432
  RenderingServerArrayFormatArrayFlagUseDynamicUpdate RenderingServerArrayFormat = 67108864
  RenderingServerArrayFormatArrayFlagUse8BoneWeights RenderingServerArrayFormat = 134217728
  RenderingServerArrayFormatArrayFlagUsesEmptyVertexArray RenderingServerArrayFormat = 268435456
)

type RenderingServerPrimitiveType int
const (
  RenderingServerPrimitiveTypePrimitivePoints RenderingServerPrimitiveType = 0
  RenderingServerPrimitiveTypePrimitiveLines RenderingServerPrimitiveType = 1
  RenderingServerPrimitiveTypePrimitiveLineStrip RenderingServerPrimitiveType = 2
  RenderingServerPrimitiveTypePrimitiveTriangles RenderingServerPrimitiveType = 3
  RenderingServerPrimitiveTypePrimitiveTriangleStrip RenderingServerPrimitiveType = 4
  RenderingServerPrimitiveTypePrimitiveMax RenderingServerPrimitiveType = 5
)

type RenderingServerBlendShapeMode int
const (
  RenderingServerBlendShapeModeBlendShapeModeNormalized RenderingServerBlendShapeMode = 0
  RenderingServerBlendShapeModeBlendShapeModeRelative RenderingServerBlendShapeMode = 1
)

type RenderingServerMultimeshTransformFormat int
const (
  RenderingServerMultimeshTransformFormatMultimeshTransform2D RenderingServerMultimeshTransformFormat = 0
  RenderingServerMultimeshTransformFormatMultimeshTransform3D RenderingServerMultimeshTransformFormat = 1
)

type RenderingServerLightProjectorFilter int
const (
  RenderingServerLightProjectorFilterLightProjectorFilterNearest RenderingServerLightProjectorFilter = 0
  RenderingServerLightProjectorFilterLightProjectorFilterLinear RenderingServerLightProjectorFilter = 1
  RenderingServerLightProjectorFilterLightProjectorFilterNearestMipmaps RenderingServerLightProjectorFilter = 2
  RenderingServerLightProjectorFilterLightProjectorFilterLinearMipmaps RenderingServerLightProjectorFilter = 3
  RenderingServerLightProjectorFilterLightProjectorFilterNearestMipmapsAnisotropic RenderingServerLightProjectorFilter = 4
  RenderingServerLightProjectorFilterLightProjectorFilterLinearMipmapsAnisotropic RenderingServerLightProjectorFilter = 5
)

type RenderingServerLightType int
const (
  RenderingServerLightTypeLightDirectional RenderingServerLightType = 0
  RenderingServerLightTypeLightOmni RenderingServerLightType = 1
  RenderingServerLightTypeLightSpot RenderingServerLightType = 2
)

type RenderingServerLightParam int
const (
  RenderingServerLightParamLightParamEnergy RenderingServerLightParam = 0
  RenderingServerLightParamLightParamIndirectEnergy RenderingServerLightParam = 1
  RenderingServerLightParamLightParamVolumetricFogEnergy RenderingServerLightParam = 2
  RenderingServerLightParamLightParamSpecular RenderingServerLightParam = 3
  RenderingServerLightParamLightParamRange RenderingServerLightParam = 4
  RenderingServerLightParamLightParamSize RenderingServerLightParam = 5
  RenderingServerLightParamLightParamAttenuation RenderingServerLightParam = 6
  RenderingServerLightParamLightParamSpotAngle RenderingServerLightParam = 7
  RenderingServerLightParamLightParamSpotAttenuation RenderingServerLightParam = 8
  RenderingServerLightParamLightParamShadowMaxDistance RenderingServerLightParam = 9
  RenderingServerLightParamLightParamShadowSplit1Offset RenderingServerLightParam = 10
  RenderingServerLightParamLightParamShadowSplit2Offset RenderingServerLightParam = 11
  RenderingServerLightParamLightParamShadowSplit3Offset RenderingServerLightParam = 12
  RenderingServerLightParamLightParamShadowFadeStart RenderingServerLightParam = 13
  RenderingServerLightParamLightParamShadowNormalBias RenderingServerLightParam = 14
  RenderingServerLightParamLightParamShadowBias RenderingServerLightParam = 15
  RenderingServerLightParamLightParamShadowPancakeSize RenderingServerLightParam = 16
  RenderingServerLightParamLightParamShadowOpacity RenderingServerLightParam = 17
  RenderingServerLightParamLightParamShadowBlur RenderingServerLightParam = 18
  RenderingServerLightParamLightParamTransmittanceBias RenderingServerLightParam = 19
  RenderingServerLightParamLightParamIntensity RenderingServerLightParam = 20
  RenderingServerLightParamLightParamMax RenderingServerLightParam = 21
)

type RenderingServerLightBakeMode int
const (
  RenderingServerLightBakeModeLightBakeDisabled RenderingServerLightBakeMode = 0
  RenderingServerLightBakeModeLightBakeStatic RenderingServerLightBakeMode = 1
  RenderingServerLightBakeModeLightBakeDynamic RenderingServerLightBakeMode = 2
)

type RenderingServerLightOmniShadowMode int
const (
  RenderingServerLightOmniShadowModeLightOmniShadowDualParaboloid RenderingServerLightOmniShadowMode = 0
  RenderingServerLightOmniShadowModeLightOmniShadowCube RenderingServerLightOmniShadowMode = 1
)

type RenderingServerLightDirectionalShadowMode int
const (
  RenderingServerLightDirectionalShadowModeLightDirectionalShadowOrthogonal RenderingServerLightDirectionalShadowMode = 0
  RenderingServerLightDirectionalShadowModeLightDirectionalShadowParallel2Splits RenderingServerLightDirectionalShadowMode = 1
  RenderingServerLightDirectionalShadowModeLightDirectionalShadowParallel4Splits RenderingServerLightDirectionalShadowMode = 2
)

type RenderingServerLightDirectionalSkyMode int
const (
  RenderingServerLightDirectionalSkyModeLightDirectionalSkyModeLightAndSky RenderingServerLightDirectionalSkyMode = 0
  RenderingServerLightDirectionalSkyModeLightDirectionalSkyModeLightOnly RenderingServerLightDirectionalSkyMode = 1
  RenderingServerLightDirectionalSkyModeLightDirectionalSkyModeSkyOnly RenderingServerLightDirectionalSkyMode = 2
)

type RenderingServerShadowQuality int
const (
  RenderingServerShadowQualityShadowQualityHard RenderingServerShadowQuality = 0
  RenderingServerShadowQualityShadowQualitySoftVeryLow RenderingServerShadowQuality = 1
  RenderingServerShadowQualityShadowQualitySoftLow RenderingServerShadowQuality = 2
  RenderingServerShadowQualityShadowQualitySoftMedium RenderingServerShadowQuality = 3
  RenderingServerShadowQualityShadowQualitySoftHigh RenderingServerShadowQuality = 4
  RenderingServerShadowQualityShadowQualitySoftUltra RenderingServerShadowQuality = 5
  RenderingServerShadowQualityShadowQualityMax RenderingServerShadowQuality = 6
)

type RenderingServerReflectionProbeUpdateMode int
const (
  RenderingServerReflectionProbeUpdateModeReflectionProbeUpdateOnce RenderingServerReflectionProbeUpdateMode = 0
  RenderingServerReflectionProbeUpdateModeReflectionProbeUpdateAlways RenderingServerReflectionProbeUpdateMode = 1
)

type RenderingServerReflectionProbeAmbientMode int
const (
  RenderingServerReflectionProbeAmbientModeReflectionProbeAmbientDisabled RenderingServerReflectionProbeAmbientMode = 0
  RenderingServerReflectionProbeAmbientModeReflectionProbeAmbientEnvironment RenderingServerReflectionProbeAmbientMode = 1
  RenderingServerReflectionProbeAmbientModeReflectionProbeAmbientColor RenderingServerReflectionProbeAmbientMode = 2
)

type RenderingServerDecalTexture int
const (
  RenderingServerDecalTextureDecalTextureAlbedo RenderingServerDecalTexture = 0
  RenderingServerDecalTextureDecalTextureNormal RenderingServerDecalTexture = 1
  RenderingServerDecalTextureDecalTextureOrm RenderingServerDecalTexture = 2
  RenderingServerDecalTextureDecalTextureEmission RenderingServerDecalTexture = 3
  RenderingServerDecalTextureDecalTextureMax RenderingServerDecalTexture = 4
)

type RenderingServerDecalFilter int
const (
  RenderingServerDecalFilterDecalFilterNearest RenderingServerDecalFilter = 0
  RenderingServerDecalFilterDecalFilterLinear RenderingServerDecalFilter = 1
  RenderingServerDecalFilterDecalFilterNearestMipmaps RenderingServerDecalFilter = 2
  RenderingServerDecalFilterDecalFilterLinearMipmaps RenderingServerDecalFilter = 3
  RenderingServerDecalFilterDecalFilterNearestMipmapsAnisotropic RenderingServerDecalFilter = 4
  RenderingServerDecalFilterDecalFilterLinearMipmapsAnisotropic RenderingServerDecalFilter = 5
)

type RenderingServerVoxelGIQuality int
const (
  RenderingServerVoxelGIQualityVoxelGiQualityLow RenderingServerVoxelGIQuality = 0
  RenderingServerVoxelGIQualityVoxelGiQualityHigh RenderingServerVoxelGIQuality = 1
)

type RenderingServerParticlesMode int
const (
  RenderingServerParticlesModeParticlesMode2D RenderingServerParticlesMode = 0
  RenderingServerParticlesModeParticlesMode3D RenderingServerParticlesMode = 1
)

type RenderingServerParticlesTransformAlign int
const (
  RenderingServerParticlesTransformAlignParticlesTransformAlignDisabled RenderingServerParticlesTransformAlign = 0
  RenderingServerParticlesTransformAlignParticlesTransformAlignZBillboard RenderingServerParticlesTransformAlign = 1
  RenderingServerParticlesTransformAlignParticlesTransformAlignYToVelocity RenderingServerParticlesTransformAlign = 2
  RenderingServerParticlesTransformAlignParticlesTransformAlignZBillboardYToVelocity RenderingServerParticlesTransformAlign = 3
)

type RenderingServerParticlesDrawOrder int
const (
  RenderingServerParticlesDrawOrderParticlesDrawOrderIndex RenderingServerParticlesDrawOrder = 0
  RenderingServerParticlesDrawOrderParticlesDrawOrderLifetime RenderingServerParticlesDrawOrder = 1
  RenderingServerParticlesDrawOrderParticlesDrawOrderReverseLifetime RenderingServerParticlesDrawOrder = 2
  RenderingServerParticlesDrawOrderParticlesDrawOrderViewDepth RenderingServerParticlesDrawOrder = 3
)

type RenderingServerParticlesCollisionType int
const (
  RenderingServerParticlesCollisionTypeParticlesCollisionTypeSphereAttract RenderingServerParticlesCollisionType = 0
  RenderingServerParticlesCollisionTypeParticlesCollisionTypeBoxAttract RenderingServerParticlesCollisionType = 1
  RenderingServerParticlesCollisionTypeParticlesCollisionTypeVectorFieldAttract RenderingServerParticlesCollisionType = 2
  RenderingServerParticlesCollisionTypeParticlesCollisionTypeSphereCollide RenderingServerParticlesCollisionType = 3
  RenderingServerParticlesCollisionTypeParticlesCollisionTypeBoxCollide RenderingServerParticlesCollisionType = 4
  RenderingServerParticlesCollisionTypeParticlesCollisionTypeSdfCollide RenderingServerParticlesCollisionType = 5
  RenderingServerParticlesCollisionTypeParticlesCollisionTypeHeightfieldCollide RenderingServerParticlesCollisionType = 6
)

type RenderingServerParticlesCollisionHeightfieldResolution int
const (
  RenderingServerParticlesCollisionHeightfieldResolutionParticlesCollisionHeightfieldResolution256 RenderingServerParticlesCollisionHeightfieldResolution = 0
  RenderingServerParticlesCollisionHeightfieldResolutionParticlesCollisionHeightfieldResolution512 RenderingServerParticlesCollisionHeightfieldResolution = 1
  RenderingServerParticlesCollisionHeightfieldResolutionParticlesCollisionHeightfieldResolution1024 RenderingServerParticlesCollisionHeightfieldResolution = 2
  RenderingServerParticlesCollisionHeightfieldResolutionParticlesCollisionHeightfieldResolution2048 RenderingServerParticlesCollisionHeightfieldResolution = 3
  RenderingServerParticlesCollisionHeightfieldResolutionParticlesCollisionHeightfieldResolution4096 RenderingServerParticlesCollisionHeightfieldResolution = 4
  RenderingServerParticlesCollisionHeightfieldResolutionParticlesCollisionHeightfieldResolution8192 RenderingServerParticlesCollisionHeightfieldResolution = 5
  RenderingServerParticlesCollisionHeightfieldResolutionParticlesCollisionHeightfieldResolutionMax RenderingServerParticlesCollisionHeightfieldResolution = 6
)

type RenderingServerFogVolumeShape int
const (
  RenderingServerFogVolumeShapeFogVolumeShapeEllipsoid RenderingServerFogVolumeShape = 0
  RenderingServerFogVolumeShapeFogVolumeShapeCone RenderingServerFogVolumeShape = 1
  RenderingServerFogVolumeShapeFogVolumeShapeCylinder RenderingServerFogVolumeShape = 2
  RenderingServerFogVolumeShapeFogVolumeShapeBox RenderingServerFogVolumeShape = 3
  RenderingServerFogVolumeShapeFogVolumeShapeWorld RenderingServerFogVolumeShape = 4
  RenderingServerFogVolumeShapeFogVolumeShapeMax RenderingServerFogVolumeShape = 5
)

type RenderingServerViewportScaling3DMode int
const (
  RenderingServerViewportScaling3DModeViewportScaling3DModeBilinear RenderingServerViewportScaling3DMode = 0
  RenderingServerViewportScaling3DModeViewportScaling3DModeFsr RenderingServerViewportScaling3DMode = 1
  RenderingServerViewportScaling3DModeViewportScaling3DModeMax RenderingServerViewportScaling3DMode = 2
)

type RenderingServerViewportUpdateMode int
const (
  RenderingServerViewportUpdateModeViewportUpdateDisabled RenderingServerViewportUpdateMode = 0
  RenderingServerViewportUpdateModeViewportUpdateOnce RenderingServerViewportUpdateMode = 1
  RenderingServerViewportUpdateModeViewportUpdateWhenVisible RenderingServerViewportUpdateMode = 2
  RenderingServerViewportUpdateModeViewportUpdateWhenParentVisible RenderingServerViewportUpdateMode = 3
  RenderingServerViewportUpdateModeViewportUpdateAlways RenderingServerViewportUpdateMode = 4
)

type RenderingServerViewportClearMode int
const (
  RenderingServerViewportClearModeViewportClearAlways RenderingServerViewportClearMode = 0
  RenderingServerViewportClearModeViewportClearNever RenderingServerViewportClearMode = 1
  RenderingServerViewportClearModeViewportClearOnlyNextFrame RenderingServerViewportClearMode = 2
)

type RenderingServerViewportEnvironmentMode int
const (
  RenderingServerViewportEnvironmentModeViewportEnvironmentDisabled RenderingServerViewportEnvironmentMode = 0
  RenderingServerViewportEnvironmentModeViewportEnvironmentEnabled RenderingServerViewportEnvironmentMode = 1
  RenderingServerViewportEnvironmentModeViewportEnvironmentInherit RenderingServerViewportEnvironmentMode = 2
  RenderingServerViewportEnvironmentModeViewportEnvironmentMax RenderingServerViewportEnvironmentMode = 3
)

type RenderingServerViewportSDFOversize int
const (
  RenderingServerViewportSDFOversizeViewportSdfOversize100Percent RenderingServerViewportSDFOversize = 0
  RenderingServerViewportSDFOversizeViewportSdfOversize120Percent RenderingServerViewportSDFOversize = 1
  RenderingServerViewportSDFOversizeViewportSdfOversize150Percent RenderingServerViewportSDFOversize = 2
  RenderingServerViewportSDFOversizeViewportSdfOversize200Percent RenderingServerViewportSDFOversize = 3
  RenderingServerViewportSDFOversizeViewportSdfOversizeMax RenderingServerViewportSDFOversize = 4
)

type RenderingServerViewportSDFScale int
const (
  RenderingServerViewportSDFScaleViewportSdfScale100Percent RenderingServerViewportSDFScale = 0
  RenderingServerViewportSDFScaleViewportSdfScale50Percent RenderingServerViewportSDFScale = 1
  RenderingServerViewportSDFScaleViewportSdfScale25Percent RenderingServerViewportSDFScale = 2
  RenderingServerViewportSDFScaleViewportSdfScaleMax RenderingServerViewportSDFScale = 3
)

type RenderingServerViewportMSAA int
const (
  RenderingServerViewportMSAAViewportMsaaDisabled RenderingServerViewportMSAA = 0
  RenderingServerViewportMSAAViewportMsaa2X RenderingServerViewportMSAA = 1
  RenderingServerViewportMSAAViewportMsaa4X RenderingServerViewportMSAA = 2
  RenderingServerViewportMSAAViewportMsaa8X RenderingServerViewportMSAA = 3
  RenderingServerViewportMSAAViewportMsaaMax RenderingServerViewportMSAA = 4
)

type RenderingServerViewportScreenSpaceAA int
const (
  RenderingServerViewportScreenSpaceAAViewportScreenSpaceAaDisabled RenderingServerViewportScreenSpaceAA = 0
  RenderingServerViewportScreenSpaceAAViewportScreenSpaceAaFxaa RenderingServerViewportScreenSpaceAA = 1
  RenderingServerViewportScreenSpaceAAViewportScreenSpaceAaMax RenderingServerViewportScreenSpaceAA = 2
)

type RenderingServerViewportOcclusionCullingBuildQuality int
const (
  RenderingServerViewportOcclusionCullingBuildQualityViewportOcclusionBuildQualityLow RenderingServerViewportOcclusionCullingBuildQuality = 0
  RenderingServerViewportOcclusionCullingBuildQualityViewportOcclusionBuildQualityMedium RenderingServerViewportOcclusionCullingBuildQuality = 1
  RenderingServerViewportOcclusionCullingBuildQualityViewportOcclusionBuildQualityHigh RenderingServerViewportOcclusionCullingBuildQuality = 2
)

type RenderingServerViewportRenderInfo int
const (
  RenderingServerViewportRenderInfoViewportRenderInfoObjectsInFrame RenderingServerViewportRenderInfo = 0
  RenderingServerViewportRenderInfoViewportRenderInfoPrimitivesInFrame RenderingServerViewportRenderInfo = 1
  RenderingServerViewportRenderInfoViewportRenderInfoDrawCallsInFrame RenderingServerViewportRenderInfo = 2
  RenderingServerViewportRenderInfoViewportRenderInfoMax RenderingServerViewportRenderInfo = 3
)

type RenderingServerViewportRenderInfoType int
const (
  RenderingServerViewportRenderInfoTypeViewportRenderInfoTypeVisible RenderingServerViewportRenderInfoType = 0
  RenderingServerViewportRenderInfoTypeViewportRenderInfoTypeShadow RenderingServerViewportRenderInfoType = 1
  RenderingServerViewportRenderInfoTypeViewportRenderInfoTypeMax RenderingServerViewportRenderInfoType = 2
)

type RenderingServerViewportDebugDraw int
const (
  RenderingServerViewportDebugDrawViewportDebugDrawDisabled RenderingServerViewportDebugDraw = 0
  RenderingServerViewportDebugDrawViewportDebugDrawUnshaded RenderingServerViewportDebugDraw = 1
  RenderingServerViewportDebugDrawViewportDebugDrawLighting RenderingServerViewportDebugDraw = 2
  RenderingServerViewportDebugDrawViewportDebugDrawOverdraw RenderingServerViewportDebugDraw = 3
  RenderingServerViewportDebugDrawViewportDebugDrawWireframe RenderingServerViewportDebugDraw = 4
  RenderingServerViewportDebugDrawViewportDebugDrawNormalBuffer RenderingServerViewportDebugDraw = 5
  RenderingServerViewportDebugDrawViewportDebugDrawVoxelGiAlbedo RenderingServerViewportDebugDraw = 6
  RenderingServerViewportDebugDrawViewportDebugDrawVoxelGiLighting RenderingServerViewportDebugDraw = 7
  RenderingServerViewportDebugDrawViewportDebugDrawVoxelGiEmission RenderingServerViewportDebugDraw = 8
  RenderingServerViewportDebugDrawViewportDebugDrawShadowAtlas RenderingServerViewportDebugDraw = 9
  RenderingServerViewportDebugDrawViewportDebugDrawDirectionalShadowAtlas RenderingServerViewportDebugDraw = 10
  RenderingServerViewportDebugDrawViewportDebugDrawSceneLuminance RenderingServerViewportDebugDraw = 11
  RenderingServerViewportDebugDrawViewportDebugDrawSsao RenderingServerViewportDebugDraw = 12
  RenderingServerViewportDebugDrawViewportDebugDrawSsil RenderingServerViewportDebugDraw = 13
  RenderingServerViewportDebugDrawViewportDebugDrawPssmSplits RenderingServerViewportDebugDraw = 14
  RenderingServerViewportDebugDrawViewportDebugDrawDecalAtlas RenderingServerViewportDebugDraw = 15
  RenderingServerViewportDebugDrawViewportDebugDrawSdfgi RenderingServerViewportDebugDraw = 16
  RenderingServerViewportDebugDrawViewportDebugDrawSdfgiProbes RenderingServerViewportDebugDraw = 17
  RenderingServerViewportDebugDrawViewportDebugDrawGiBuffer RenderingServerViewportDebugDraw = 18
  RenderingServerViewportDebugDrawViewportDebugDrawDisableLod RenderingServerViewportDebugDraw = 19
  RenderingServerViewportDebugDrawViewportDebugDrawClusterOmniLights RenderingServerViewportDebugDraw = 20
  RenderingServerViewportDebugDrawViewportDebugDrawClusterSpotLights RenderingServerViewportDebugDraw = 21
  RenderingServerViewportDebugDrawViewportDebugDrawClusterDecals RenderingServerViewportDebugDraw = 22
  RenderingServerViewportDebugDrawViewportDebugDrawClusterReflectionProbes RenderingServerViewportDebugDraw = 23
  RenderingServerViewportDebugDrawViewportDebugDrawOccluders RenderingServerViewportDebugDraw = 24
  RenderingServerViewportDebugDrawViewportDebugDrawMotionVectors RenderingServerViewportDebugDraw = 25
)

type RenderingServerViewportVRSMode int
const (
  RenderingServerViewportVRSModeViewportVrsDisabled RenderingServerViewportVRSMode = 0
  RenderingServerViewportVRSModeViewportVrsTexture RenderingServerViewportVRSMode = 1
  RenderingServerViewportVRSModeViewportVrsXr RenderingServerViewportVRSMode = 2
  RenderingServerViewportVRSModeViewportVrsMax RenderingServerViewportVRSMode = 3
)

type RenderingServerSkyMode int
const (
  RenderingServerSkyModeSkyModeAutomatic RenderingServerSkyMode = 0
  RenderingServerSkyModeSkyModeQuality RenderingServerSkyMode = 1
  RenderingServerSkyModeSkyModeIncremental RenderingServerSkyMode = 2
  RenderingServerSkyModeSkyModeRealtime RenderingServerSkyMode = 3
)

type RenderingServerEnvironmentBG int
const (
  RenderingServerEnvironmentBGEnvBgClearColor RenderingServerEnvironmentBG = 0
  RenderingServerEnvironmentBGEnvBgColor RenderingServerEnvironmentBG = 1
  RenderingServerEnvironmentBGEnvBgSky RenderingServerEnvironmentBG = 2
  RenderingServerEnvironmentBGEnvBgCanvas RenderingServerEnvironmentBG = 3
  RenderingServerEnvironmentBGEnvBgKeep RenderingServerEnvironmentBG = 4
  RenderingServerEnvironmentBGEnvBgCameraFeed RenderingServerEnvironmentBG = 5
  RenderingServerEnvironmentBGEnvBgMax RenderingServerEnvironmentBG = 6
)

type RenderingServerEnvironmentAmbientSource int
const (
  RenderingServerEnvironmentAmbientSourceEnvAmbientSourceBg RenderingServerEnvironmentAmbientSource = 0
  RenderingServerEnvironmentAmbientSourceEnvAmbientSourceDisabled RenderingServerEnvironmentAmbientSource = 1
  RenderingServerEnvironmentAmbientSourceEnvAmbientSourceColor RenderingServerEnvironmentAmbientSource = 2
  RenderingServerEnvironmentAmbientSourceEnvAmbientSourceSky RenderingServerEnvironmentAmbientSource = 3
)

type RenderingServerEnvironmentReflectionSource int
const (
  RenderingServerEnvironmentReflectionSourceEnvReflectionSourceBg RenderingServerEnvironmentReflectionSource = 0
  RenderingServerEnvironmentReflectionSourceEnvReflectionSourceDisabled RenderingServerEnvironmentReflectionSource = 1
  RenderingServerEnvironmentReflectionSourceEnvReflectionSourceSky RenderingServerEnvironmentReflectionSource = 2
)

type RenderingServerEnvironmentGlowBlendMode int
const (
  RenderingServerEnvironmentGlowBlendModeEnvGlowBlendModeAdditive RenderingServerEnvironmentGlowBlendMode = 0
  RenderingServerEnvironmentGlowBlendModeEnvGlowBlendModeScreen RenderingServerEnvironmentGlowBlendMode = 1
  RenderingServerEnvironmentGlowBlendModeEnvGlowBlendModeSoftlight RenderingServerEnvironmentGlowBlendMode = 2
  RenderingServerEnvironmentGlowBlendModeEnvGlowBlendModeReplace RenderingServerEnvironmentGlowBlendMode = 3
  RenderingServerEnvironmentGlowBlendModeEnvGlowBlendModeMix RenderingServerEnvironmentGlowBlendMode = 4
)

type RenderingServerEnvironmentToneMapper int
const (
  RenderingServerEnvironmentToneMapperEnvToneMapperLinear RenderingServerEnvironmentToneMapper = 0
  RenderingServerEnvironmentToneMapperEnvToneMapperReinhard RenderingServerEnvironmentToneMapper = 1
  RenderingServerEnvironmentToneMapperEnvToneMapperFilmic RenderingServerEnvironmentToneMapper = 2
  RenderingServerEnvironmentToneMapperEnvToneMapperAces RenderingServerEnvironmentToneMapper = 3
)

type RenderingServerEnvironmentSSRRoughnessQuality int
const (
  RenderingServerEnvironmentSSRRoughnessQualityEnvSsrRoughnessQualityDisabled RenderingServerEnvironmentSSRRoughnessQuality = 0
  RenderingServerEnvironmentSSRRoughnessQualityEnvSsrRoughnessQualityLow RenderingServerEnvironmentSSRRoughnessQuality = 1
  RenderingServerEnvironmentSSRRoughnessQualityEnvSsrRoughnessQualityMedium RenderingServerEnvironmentSSRRoughnessQuality = 2
  RenderingServerEnvironmentSSRRoughnessQualityEnvSsrRoughnessQualityHigh RenderingServerEnvironmentSSRRoughnessQuality = 3
)

type RenderingServerEnvironmentSSAOQuality int
const (
  RenderingServerEnvironmentSSAOQualityEnvSsaoQualityVeryLow RenderingServerEnvironmentSSAOQuality = 0
  RenderingServerEnvironmentSSAOQualityEnvSsaoQualityLow RenderingServerEnvironmentSSAOQuality = 1
  RenderingServerEnvironmentSSAOQualityEnvSsaoQualityMedium RenderingServerEnvironmentSSAOQuality = 2
  RenderingServerEnvironmentSSAOQualityEnvSsaoQualityHigh RenderingServerEnvironmentSSAOQuality = 3
  RenderingServerEnvironmentSSAOQualityEnvSsaoQualityUltra RenderingServerEnvironmentSSAOQuality = 4
)

type RenderingServerEnvironmentSSILQuality int
const (
  RenderingServerEnvironmentSSILQualityEnvSsilQualityVeryLow RenderingServerEnvironmentSSILQuality = 0
  RenderingServerEnvironmentSSILQualityEnvSsilQualityLow RenderingServerEnvironmentSSILQuality = 1
  RenderingServerEnvironmentSSILQualityEnvSsilQualityMedium RenderingServerEnvironmentSSILQuality = 2
  RenderingServerEnvironmentSSILQualityEnvSsilQualityHigh RenderingServerEnvironmentSSILQuality = 3
  RenderingServerEnvironmentSSILQualityEnvSsilQualityUltra RenderingServerEnvironmentSSILQuality = 4
)

type RenderingServerEnvironmentSDFGIYScale int
const (
  RenderingServerEnvironmentSDFGIYScaleEnvSdfgiYScale50Percent RenderingServerEnvironmentSDFGIYScale = 0
  RenderingServerEnvironmentSDFGIYScaleEnvSdfgiYScale75Percent RenderingServerEnvironmentSDFGIYScale = 1
  RenderingServerEnvironmentSDFGIYScaleEnvSdfgiYScale100Percent RenderingServerEnvironmentSDFGIYScale = 2
)

type RenderingServerEnvironmentSDFGIRayCount int
const (
  RenderingServerEnvironmentSDFGIRayCountEnvSdfgiRayCount4 RenderingServerEnvironmentSDFGIRayCount = 0
  RenderingServerEnvironmentSDFGIRayCountEnvSdfgiRayCount8 RenderingServerEnvironmentSDFGIRayCount = 1
  RenderingServerEnvironmentSDFGIRayCountEnvSdfgiRayCount16 RenderingServerEnvironmentSDFGIRayCount = 2
  RenderingServerEnvironmentSDFGIRayCountEnvSdfgiRayCount32 RenderingServerEnvironmentSDFGIRayCount = 3
  RenderingServerEnvironmentSDFGIRayCountEnvSdfgiRayCount64 RenderingServerEnvironmentSDFGIRayCount = 4
  RenderingServerEnvironmentSDFGIRayCountEnvSdfgiRayCount96 RenderingServerEnvironmentSDFGIRayCount = 5
  RenderingServerEnvironmentSDFGIRayCountEnvSdfgiRayCount128 RenderingServerEnvironmentSDFGIRayCount = 6
  RenderingServerEnvironmentSDFGIRayCountEnvSdfgiRayCountMax RenderingServerEnvironmentSDFGIRayCount = 7
)

type RenderingServerEnvironmentSDFGIFramesToConverge int
const (
  RenderingServerEnvironmentSDFGIFramesToConvergeEnvSdfgiConvergeIn5Frames RenderingServerEnvironmentSDFGIFramesToConverge = 0
  RenderingServerEnvironmentSDFGIFramesToConvergeEnvSdfgiConvergeIn10Frames RenderingServerEnvironmentSDFGIFramesToConverge = 1
  RenderingServerEnvironmentSDFGIFramesToConvergeEnvSdfgiConvergeIn15Frames RenderingServerEnvironmentSDFGIFramesToConverge = 2
  RenderingServerEnvironmentSDFGIFramesToConvergeEnvSdfgiConvergeIn20Frames RenderingServerEnvironmentSDFGIFramesToConverge = 3
  RenderingServerEnvironmentSDFGIFramesToConvergeEnvSdfgiConvergeIn25Frames RenderingServerEnvironmentSDFGIFramesToConverge = 4
  RenderingServerEnvironmentSDFGIFramesToConvergeEnvSdfgiConvergeIn30Frames RenderingServerEnvironmentSDFGIFramesToConverge = 5
  RenderingServerEnvironmentSDFGIFramesToConvergeEnvSdfgiConvergeMax RenderingServerEnvironmentSDFGIFramesToConverge = 6
)

type RenderingServerEnvironmentSDFGIFramesToUpdateLight int
const (
  RenderingServerEnvironmentSDFGIFramesToUpdateLightEnvSdfgiUpdateLightIn1Frame RenderingServerEnvironmentSDFGIFramesToUpdateLight = 0
  RenderingServerEnvironmentSDFGIFramesToUpdateLightEnvSdfgiUpdateLightIn2Frames RenderingServerEnvironmentSDFGIFramesToUpdateLight = 1
  RenderingServerEnvironmentSDFGIFramesToUpdateLightEnvSdfgiUpdateLightIn4Frames RenderingServerEnvironmentSDFGIFramesToUpdateLight = 2
  RenderingServerEnvironmentSDFGIFramesToUpdateLightEnvSdfgiUpdateLightIn8Frames RenderingServerEnvironmentSDFGIFramesToUpdateLight = 3
  RenderingServerEnvironmentSDFGIFramesToUpdateLightEnvSdfgiUpdateLightIn16Frames RenderingServerEnvironmentSDFGIFramesToUpdateLight = 4
  RenderingServerEnvironmentSDFGIFramesToUpdateLightEnvSdfgiUpdateLightMax RenderingServerEnvironmentSDFGIFramesToUpdateLight = 5
)

type RenderingServerSubSurfaceScatteringQuality int
const (
  RenderingServerSubSurfaceScatteringQualitySubSurfaceScatteringQualityDisabled RenderingServerSubSurfaceScatteringQuality = 0
  RenderingServerSubSurfaceScatteringQualitySubSurfaceScatteringQualityLow RenderingServerSubSurfaceScatteringQuality = 1
  RenderingServerSubSurfaceScatteringQualitySubSurfaceScatteringQualityMedium RenderingServerSubSurfaceScatteringQuality = 2
  RenderingServerSubSurfaceScatteringQualitySubSurfaceScatteringQualityHigh RenderingServerSubSurfaceScatteringQuality = 3
)

type RenderingServerDOFBokehShape int
const (
  RenderingServerDOFBokehShapeDofBokehBox RenderingServerDOFBokehShape = 0
  RenderingServerDOFBokehShapeDofBokehHexagon RenderingServerDOFBokehShape = 1
  RenderingServerDOFBokehShapeDofBokehCircle RenderingServerDOFBokehShape = 2
)

type RenderingServerDOFBlurQuality int
const (
  RenderingServerDOFBlurQualityDofBlurQualityVeryLow RenderingServerDOFBlurQuality = 0
  RenderingServerDOFBlurQualityDofBlurQualityLow RenderingServerDOFBlurQuality = 1
  RenderingServerDOFBlurQualityDofBlurQualityMedium RenderingServerDOFBlurQuality = 2
  RenderingServerDOFBlurQualityDofBlurQualityHigh RenderingServerDOFBlurQuality = 3
)

type RenderingServerInstanceType int
const (
  RenderingServerInstanceTypeInstanceNone RenderingServerInstanceType = 0
  RenderingServerInstanceTypeInstanceMesh RenderingServerInstanceType = 1
  RenderingServerInstanceTypeInstanceMultimesh RenderingServerInstanceType = 2
  RenderingServerInstanceTypeInstanceParticles RenderingServerInstanceType = 3
  RenderingServerInstanceTypeInstanceParticlesCollision RenderingServerInstanceType = 4
  RenderingServerInstanceTypeInstanceLight RenderingServerInstanceType = 5
  RenderingServerInstanceTypeInstanceReflectionProbe RenderingServerInstanceType = 6
  RenderingServerInstanceTypeInstanceDecal RenderingServerInstanceType = 7
  RenderingServerInstanceTypeInstanceVoxelGi RenderingServerInstanceType = 8
  RenderingServerInstanceTypeInstanceLightmap RenderingServerInstanceType = 9
  RenderingServerInstanceTypeInstanceOccluder RenderingServerInstanceType = 10
  RenderingServerInstanceTypeInstanceVisiblityNotifier RenderingServerInstanceType = 11
  RenderingServerInstanceTypeInstanceFogVolume RenderingServerInstanceType = 12
  RenderingServerInstanceTypeInstanceMax RenderingServerInstanceType = 13
  RenderingServerInstanceTypeInstanceGeometryMask RenderingServerInstanceType = 14
)

type RenderingServerInstanceFlags int
const (
  RenderingServerInstanceFlagsInstanceFlagUseBakedLight RenderingServerInstanceFlags = 0
  RenderingServerInstanceFlagsInstanceFlagUseDynamicGi RenderingServerInstanceFlags = 1
  RenderingServerInstanceFlagsInstanceFlagDrawNextFrameIfVisible RenderingServerInstanceFlags = 2
  RenderingServerInstanceFlagsInstanceFlagIgnoreOcclusionCulling RenderingServerInstanceFlags = 3
  RenderingServerInstanceFlagsInstanceFlagMax RenderingServerInstanceFlags = 4
)

type RenderingServerShadowCastingSetting int
const (
  RenderingServerShadowCastingSettingShadowCastingSettingOff RenderingServerShadowCastingSetting = 0
  RenderingServerShadowCastingSettingShadowCastingSettingOn RenderingServerShadowCastingSetting = 1
  RenderingServerShadowCastingSettingShadowCastingSettingDoubleSided RenderingServerShadowCastingSetting = 2
  RenderingServerShadowCastingSettingShadowCastingSettingShadowsOnly RenderingServerShadowCastingSetting = 3
)

type RenderingServerVisibilityRangeFadeMode int
const (
  RenderingServerVisibilityRangeFadeModeVisibilityRangeFadeDisabled RenderingServerVisibilityRangeFadeMode = 0
  RenderingServerVisibilityRangeFadeModeVisibilityRangeFadeSelf RenderingServerVisibilityRangeFadeMode = 1
  RenderingServerVisibilityRangeFadeModeVisibilityRangeFadeDependencies RenderingServerVisibilityRangeFadeMode = 2
)

type RenderingServerBakeChannels int
const (
  RenderingServerBakeChannelsBakeChannelAlbedoAlpha RenderingServerBakeChannels = 0
  RenderingServerBakeChannelsBakeChannelNormal RenderingServerBakeChannels = 1
  RenderingServerBakeChannelsBakeChannelOrm RenderingServerBakeChannels = 2
  RenderingServerBakeChannelsBakeChannelEmission RenderingServerBakeChannels = 3
)

type RenderingServerCanvasTextureChannel int
const (
  RenderingServerCanvasTextureChannelCanvasTextureChannelDiffuse RenderingServerCanvasTextureChannel = 0
  RenderingServerCanvasTextureChannelCanvasTextureChannelNormal RenderingServerCanvasTextureChannel = 1
  RenderingServerCanvasTextureChannelCanvasTextureChannelSpecular RenderingServerCanvasTextureChannel = 2
)

type RenderingServerNinePatchAxisMode int
const (
  RenderingServerNinePatchAxisModeNinePatchStretch RenderingServerNinePatchAxisMode = 0
  RenderingServerNinePatchAxisModeNinePatchTile RenderingServerNinePatchAxisMode = 1
  RenderingServerNinePatchAxisModeNinePatchTileFit RenderingServerNinePatchAxisMode = 2
)

type RenderingServerCanvasItemTextureFilter int
const (
  RenderingServerCanvasItemTextureFilterCanvasItemTextureFilterDefault RenderingServerCanvasItemTextureFilter = 0
  RenderingServerCanvasItemTextureFilterCanvasItemTextureFilterNearest RenderingServerCanvasItemTextureFilter = 1
  RenderingServerCanvasItemTextureFilterCanvasItemTextureFilterLinear RenderingServerCanvasItemTextureFilter = 2
  RenderingServerCanvasItemTextureFilterCanvasItemTextureFilterNearestWithMipmaps RenderingServerCanvasItemTextureFilter = 3
  RenderingServerCanvasItemTextureFilterCanvasItemTextureFilterLinearWithMipmaps RenderingServerCanvasItemTextureFilter = 4
  RenderingServerCanvasItemTextureFilterCanvasItemTextureFilterNearestWithMipmapsAnisotropic RenderingServerCanvasItemTextureFilter = 5
  RenderingServerCanvasItemTextureFilterCanvasItemTextureFilterLinearWithMipmapsAnisotropic RenderingServerCanvasItemTextureFilter = 6
  RenderingServerCanvasItemTextureFilterCanvasItemTextureFilterMax RenderingServerCanvasItemTextureFilter = 7
)

type RenderingServerCanvasItemTextureRepeat int
const (
  RenderingServerCanvasItemTextureRepeatCanvasItemTextureRepeatDefault RenderingServerCanvasItemTextureRepeat = 0
  RenderingServerCanvasItemTextureRepeatCanvasItemTextureRepeatDisabled RenderingServerCanvasItemTextureRepeat = 1
  RenderingServerCanvasItemTextureRepeatCanvasItemTextureRepeatEnabled RenderingServerCanvasItemTextureRepeat = 2
  RenderingServerCanvasItemTextureRepeatCanvasItemTextureRepeatMirror RenderingServerCanvasItemTextureRepeat = 3
  RenderingServerCanvasItemTextureRepeatCanvasItemTextureRepeatMax RenderingServerCanvasItemTextureRepeat = 4
)

type RenderingServerCanvasGroupMode int
const (
  RenderingServerCanvasGroupModeCanvasGroupModeDisabled RenderingServerCanvasGroupMode = 0
  RenderingServerCanvasGroupModeCanvasGroupModeClipOnly RenderingServerCanvasGroupMode = 1
  RenderingServerCanvasGroupModeCanvasGroupModeClipAndDraw RenderingServerCanvasGroupMode = 2
  RenderingServerCanvasGroupModeCanvasGroupModeTransparent RenderingServerCanvasGroupMode = 3
)

type RenderingServerCanvasLightMode int
const (
  RenderingServerCanvasLightModeCanvasLightModePoint RenderingServerCanvasLightMode = 0
  RenderingServerCanvasLightModeCanvasLightModeDirectional RenderingServerCanvasLightMode = 1
)

type RenderingServerCanvasLightBlendMode int
const (
  RenderingServerCanvasLightBlendModeCanvasLightBlendModeAdd RenderingServerCanvasLightBlendMode = 0
  RenderingServerCanvasLightBlendModeCanvasLightBlendModeSub RenderingServerCanvasLightBlendMode = 1
  RenderingServerCanvasLightBlendModeCanvasLightBlendModeMix RenderingServerCanvasLightBlendMode = 2
)

type RenderingServerCanvasLightShadowFilter int
const (
  RenderingServerCanvasLightShadowFilterCanvasLightFilterNone RenderingServerCanvasLightShadowFilter = 0
  RenderingServerCanvasLightShadowFilterCanvasLightFilterPcf5 RenderingServerCanvasLightShadowFilter = 1
  RenderingServerCanvasLightShadowFilterCanvasLightFilterPcf13 RenderingServerCanvasLightShadowFilter = 2
  RenderingServerCanvasLightShadowFilterCanvasLightFilterMax RenderingServerCanvasLightShadowFilter = 3
)

type RenderingServerCanvasOccluderPolygonCullMode int
const (
  RenderingServerCanvasOccluderPolygonCullModeCanvasOccluderPolygonCullDisabled RenderingServerCanvasOccluderPolygonCullMode = 0
  RenderingServerCanvasOccluderPolygonCullModeCanvasOccluderPolygonCullClockwise RenderingServerCanvasOccluderPolygonCullMode = 1
  RenderingServerCanvasOccluderPolygonCullModeCanvasOccluderPolygonCullCounterClockwise RenderingServerCanvasOccluderPolygonCullMode = 2
)

type RenderingServerGlobalShaderParameterType int
const (
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeBool RenderingServerGlobalShaderParameterType = 0
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeBvec2 RenderingServerGlobalShaderParameterType = 1
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeBvec3 RenderingServerGlobalShaderParameterType = 2
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeBvec4 RenderingServerGlobalShaderParameterType = 3
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeInt RenderingServerGlobalShaderParameterType = 4
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeIvec2 RenderingServerGlobalShaderParameterType = 5
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeIvec3 RenderingServerGlobalShaderParameterType = 6
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeIvec4 RenderingServerGlobalShaderParameterType = 7
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeRect2I RenderingServerGlobalShaderParameterType = 8
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeUint RenderingServerGlobalShaderParameterType = 9
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeUvec2 RenderingServerGlobalShaderParameterType = 10
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeUvec3 RenderingServerGlobalShaderParameterType = 11
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeUvec4 RenderingServerGlobalShaderParameterType = 12
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeFloat RenderingServerGlobalShaderParameterType = 13
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeVec2 RenderingServerGlobalShaderParameterType = 14
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeVec3 RenderingServerGlobalShaderParameterType = 15
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeVec4 RenderingServerGlobalShaderParameterType = 16
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeColor RenderingServerGlobalShaderParameterType = 17
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeRect2 RenderingServerGlobalShaderParameterType = 18
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeMat2 RenderingServerGlobalShaderParameterType = 19
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeMat3 RenderingServerGlobalShaderParameterType = 20
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeMat4 RenderingServerGlobalShaderParameterType = 21
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeTransform2D RenderingServerGlobalShaderParameterType = 22
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeTransform RenderingServerGlobalShaderParameterType = 23
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeSampler2D RenderingServerGlobalShaderParameterType = 24
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeSampler2Darray RenderingServerGlobalShaderParameterType = 25
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeSampler3D RenderingServerGlobalShaderParameterType = 26
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeSamplercube RenderingServerGlobalShaderParameterType = 27
  RenderingServerGlobalShaderParameterTypeGlobalVarTypeMax RenderingServerGlobalShaderParameterType = 28
)

type RenderingServerRenderingInfo int
const (
  RenderingServerRenderingInfoRenderingInfoTotalObjectsInFrame RenderingServerRenderingInfo = 0
  RenderingServerRenderingInfoRenderingInfoTotalPrimitivesInFrame RenderingServerRenderingInfo = 1
  RenderingServerRenderingInfoRenderingInfoTotalDrawCallsInFrame RenderingServerRenderingInfo = 2
  RenderingServerRenderingInfoRenderingInfoTextureMemUsed RenderingServerRenderingInfo = 3
  RenderingServerRenderingInfoRenderingInfoBufferMemUsed RenderingServerRenderingInfo = 4
  RenderingServerRenderingInfoRenderingInfoVideoMemUsed RenderingServerRenderingInfo = 5
)

type RenderingServerFeatures int
const (
  RenderingServerFeaturesFeatureShaders RenderingServerFeatures = 0
  RenderingServerFeaturesFeatureMultithreaded RenderingServerFeatures = 1
)

func (me *RenderingServer) AsTypePtr() gdc.TypePtr {
  return gdc.TypePtr(me.obj)
}

func (me *RenderingServer) AsCTypePtr() gdc.ConstTypePtr {
  return gdc.ConstTypePtr(me.obj)
}


// Methods

func  (me *RenderingServer) Texture2DCreate(image Image, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) Texture2DLayeredCreate(layers Image, layered_type RenderingServerTextureLayeredType, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) Texture3DCreate(format ImageFormat, width int, height int, depth int, mipmaps bool, data Image, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) TextureProxyCreate(base RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) Texture2DUpdate(texture RID, image Image, layer int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) Texture3DUpdate(texture RID, data Image, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) TextureProxyUpdate(texture RID, proxy_to RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) Texture2DPlaceholderCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) Texture2DLayeredPlaceholderCreate(layered_type RenderingServerTextureLayeredType, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) Texture3DPlaceholderCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) Texture2DGet(texture RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) Texture2DLayerGet(texture RID, layer int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) Texture3DGet(texture RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) TextureReplace(texture RID, by_texture RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) TextureSetSizeOverride(texture RID, width int, height int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) TextureSetPath(texture RID, path String, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) TextureGetPath(texture RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) TextureSetForceRedrawIfVisible(texture RID, enable bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) TextureGetRdTexture(texture RID, srgb bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) TextureGetNativeHandle(texture RID, srgb bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ShaderCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ShaderSetCode(shader RID, code String, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ShaderSetPathHint(shader RID, path String, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ShaderGetCode(shader RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) GetShaderParameterList(shader RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ShaderGetParameterDefault(shader RID, name StringName, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ShaderSetDefaultTextureParameter(shader RID, name StringName, texture RID, index int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ShaderGetDefaultTextureParameter(shader RID, name StringName, index int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MaterialCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MaterialSetShader(shader_material RID, shader RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MaterialSetParam(material RID, parameter StringName, value Variant, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MaterialGetParam(material RID, parameter StringName, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MaterialSetRenderPriority(material RID, priority int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MaterialSetNextPass(material RID, next_material RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MeshCreateFromSurfaces(surfaces Dictionary, blend_shape_count int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MeshCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MeshSurfaceGetFormatOffset(format RenderingServerArrayFormat, vertex_count int, array_index int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MeshSurfaceGetFormatVertexStride(format RenderingServerArrayFormat, vertex_count int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MeshSurfaceGetFormatAttributeStride(format RenderingServerArrayFormat, vertex_count int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MeshSurfaceGetFormatSkinStride(format RenderingServerArrayFormat, vertex_count int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MeshAddSurface(mesh RID, surface Dictionary, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MeshAddSurfaceFromArrays(mesh RID, primitive RenderingServerPrimitiveType, arrays Array, blend_shapes Array, lods Dictionary, compress_format RenderingServerArrayFormat, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MeshGetBlendShapeCount(mesh RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MeshSetBlendShapeMode(mesh RID, mode RenderingServerBlendShapeMode, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MeshGetBlendShapeMode(mesh RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MeshSurfaceSetMaterial(mesh RID, surface int, material RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MeshSurfaceGetMaterial(mesh RID, surface int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MeshGetSurface(mesh RID, surface int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MeshSurfaceGetArrays(mesh RID, surface int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MeshSurfaceGetBlendShapeArrays(mesh RID, surface int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MeshGetSurfaceCount(mesh RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MeshSetCustomAabb(mesh RID, aabb AABB, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MeshGetCustomAabb(mesh RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MeshClear(mesh RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MeshSurfaceUpdateVertexRegion(mesh RID, surface int, offset int, data PackedByteArray, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MeshSurfaceUpdateAttributeRegion(mesh RID, surface int, offset int, data PackedByteArray, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MeshSurfaceUpdateSkinRegion(mesh RID, surface int, offset int, data PackedByteArray, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MeshSetShadowMesh(mesh RID, shadow_mesh RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MultimeshCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MultimeshAllocateData(multimesh RID, instances int, transform_format RenderingServerMultimeshTransformFormat, color_format bool, custom_data_format bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MultimeshGetInstanceCount(multimesh RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MultimeshSetMesh(multimesh RID, mesh RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MultimeshInstanceSetTransform(multimesh RID, index int, transform Transform3D, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MultimeshInstanceSetTransform2D(multimesh RID, index int, transform Transform2D, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MultimeshInstanceSetColor(multimesh RID, index int, color Color, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MultimeshInstanceSetCustomData(multimesh RID, index int, custom_data Color, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MultimeshGetMesh(multimesh RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MultimeshGetAabb(multimesh RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MultimeshInstanceGetTransform(multimesh RID, index int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MultimeshInstanceGetTransform2D(multimesh RID, index int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MultimeshInstanceGetColor(multimesh RID, index int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MultimeshInstanceGetCustomData(multimesh RID, index int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MultimeshSetVisibleInstances(multimesh RID, visible int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MultimeshGetVisibleInstances(multimesh RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MultimeshSetBuffer(multimesh RID, buffer PackedFloat32Array, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MultimeshGetBuffer(multimesh RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) SkeletonCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) SkeletonAllocateData(skeleton RID, bones int, is_2d_skeleton bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) SkeletonGetBoneCount(skeleton RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) SkeletonBoneSetTransform(skeleton RID, bone int, transform Transform3D, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) SkeletonBoneGetTransform(skeleton RID, bone int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) SkeletonBoneSetTransform2D(skeleton RID, bone int, transform Transform2D, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) SkeletonBoneGetTransform2D(skeleton RID, bone int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) SkeletonSetBaseTransform2D(skeleton RID, base_transform Transform2D, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) DirectionalLightCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) OmniLightCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) SpotLightCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) LightSetColor(light RID, color Color, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) LightSetParam(light RID, param RenderingServerLightParam, value float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) LightSetShadow(light RID, enabled bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) LightSetProjector(light RID, texture RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) LightSetNegative(light RID, enable bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) LightSetCullMask(light RID, mask int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) LightSetDistanceFade(decal RID, enabled bool, begin float32, shadow float32, length float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) LightSetReverseCullFaceMode(light RID, enabled bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) LightSetBakeMode(light RID, bake_mode RenderingServerLightBakeMode, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) LightSetMaxSdfgiCascade(light RID, cascade int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) LightOmniSetShadowMode(light RID, mode RenderingServerLightOmniShadowMode, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) LightDirectionalSetShadowMode(light RID, mode RenderingServerLightDirectionalShadowMode, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) LightDirectionalSetBlendSplits(light RID, enable bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) LightDirectionalSetSkyMode(light RID, mode RenderingServerLightDirectionalSkyMode, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) LightProjectorsSetFilter(filter RenderingServerLightProjectorFilter, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) PositionalSoftShadowFilterSetQuality(quality RenderingServerShadowQuality, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) DirectionalSoftShadowFilterSetQuality(quality RenderingServerShadowQuality, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) DirectionalShadowAtlasSetSize(size int, is_16bits bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ReflectionProbeCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ReflectionProbeSetUpdateMode(probe RID, mode RenderingServerReflectionProbeUpdateMode, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ReflectionProbeSetIntensity(probe RID, intensity float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ReflectionProbeSetAmbientMode(probe RID, mode RenderingServerReflectionProbeAmbientMode, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ReflectionProbeSetAmbientColor(probe RID, color Color, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ReflectionProbeSetAmbientEnergy(probe RID, energy float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ReflectionProbeSetMaxDistance(probe RID, distance float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ReflectionProbeSetSize(probe RID, size Vector3, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ReflectionProbeSetOriginOffset(probe RID, offset Vector3, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ReflectionProbeSetAsInterior(probe RID, enable bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ReflectionProbeSetEnableBoxProjection(probe RID, enable bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ReflectionProbeSetEnableShadows(probe RID, enable bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ReflectionProbeSetCullMask(probe RID, layers int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ReflectionProbeSetResolution(probe RID, resolution int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ReflectionProbeSetMeshLodThreshold(probe RID, pixels float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) DecalCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) DecalSetSize(decal RID, size Vector3, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) DecalSetTexture(decal RID, type_ RenderingServerDecalTexture, texture RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) DecalSetEmissionEnergy(decal RID, energy float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) DecalSetAlbedoMix(decal RID, albedo_mix float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) DecalSetModulate(decal RID, color Color, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) DecalSetCullMask(decal RID, mask int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) DecalSetDistanceFade(decal RID, enabled bool, begin float32, length float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) DecalSetFade(decal RID, above float32, below float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) DecalSetNormalFade(decal RID, fade float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) DecalsSetFilter(filter RenderingServerDecalFilter, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) GiSetUseHalfResolution(half_resolution bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) VoxelGiCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) VoxelGiAllocateData(voxel_gi RID, to_cell_xform Transform3D, aabb AABB, octree_size Vector3i, octree_cells PackedByteArray, data_cells PackedByteArray, distance_field PackedByteArray, level_counts PackedInt32Array, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) VoxelGiGetOctreeSize(voxel_gi RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) VoxelGiGetOctreeCells(voxel_gi RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) VoxelGiGetDataCells(voxel_gi RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) VoxelGiGetDistanceField(voxel_gi RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) VoxelGiGetLevelCounts(voxel_gi RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) VoxelGiGetToCellXform(voxel_gi RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) VoxelGiSetDynamicRange(voxel_gi RID, range_ float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) VoxelGiSetPropagation(voxel_gi RID, amount float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) VoxelGiSetEnergy(voxel_gi RID, energy float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) VoxelGiSetBakedExposureNormalization(voxel_gi RID, baked_exposure float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) VoxelGiSetBias(voxel_gi RID, bias float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) VoxelGiSetNormalBias(voxel_gi RID, bias float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) VoxelGiSetInterior(voxel_gi RID, enable bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) VoxelGiSetUseTwoBounces(voxel_gi RID, enable bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) VoxelGiSetQuality(quality RenderingServerVoxelGIQuality, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) LightmapCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) LightmapSetTextures(lightmap RID, light RID, uses_sh bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) LightmapSetProbeBounds(lightmap RID, bounds AABB, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) LightmapSetProbeInterior(lightmap RID, interior bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) LightmapSetProbeCaptureData(lightmap RID, points PackedVector3Array, point_sh PackedColorArray, tetrahedra PackedInt32Array, bsp_tree PackedInt32Array, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) LightmapGetProbeCapturePoints(lightmap RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) LightmapGetProbeCaptureSh(lightmap RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) LightmapGetProbeCaptureTetrahedra(lightmap RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) LightmapGetProbeCaptureBspTree(lightmap RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) LightmapSetBakedExposureNormalization(lightmap RID, baked_exposure float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) LightmapSetProbeCaptureUpdateSpeed(speed float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesSetMode(particles RID, mode RenderingServerParticlesMode, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesSetEmitting(particles RID, emitting bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesGetEmitting(particles RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesSetAmount(particles RID, amount int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesSetLifetime(particles RID, lifetime float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesSetOneShot(particles RID, one_shot bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesSetPreProcessTime(particles RID, time float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesSetExplosivenessRatio(particles RID, ratio float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesSetRandomnessRatio(particles RID, ratio float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesSetCustomAabb(particles RID, aabb AABB, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesSetSpeedScale(particles RID, scale float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesSetUseLocalCoordinates(particles RID, enable bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesSetProcessMaterial(particles RID, material RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesSetFixedFps(particles RID, fps int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesSetInterpolate(particles RID, enable bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesSetFractionalDelta(particles RID, enable bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesSetCollisionBaseSize(particles RID, size float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesSetTransformAlign(particles RID, align RenderingServerParticlesTransformAlign, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesSetTrails(particles RID, enable bool, length_sec float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesSetTrailBindPoses(particles RID, bind_poses Transform3D, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesIsInactive(particles RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesRequestProcess(particles RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesRestart(particles RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesSetSubemitter(particles RID, subemitter_particles RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesEmit(particles RID, transform Transform3D, velocity Vector3, color Color, custom Color, emit_flags int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesSetDrawOrder(particles RID, order RenderingServerParticlesDrawOrder, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesSetDrawPasses(particles RID, count int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesSetDrawPassMesh(particles RID, pass int, mesh RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesGetCurrentAabb(particles RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesSetEmissionTransform(particles RID, transform Transform3D, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesCollisionCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesCollisionSetCollisionType(particles_collision RID, type_ RenderingServerParticlesCollisionType, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesCollisionSetCullMask(particles_collision RID, mask int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesCollisionSetSphereRadius(particles_collision RID, radius float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesCollisionSetBoxExtents(particles_collision RID, extents Vector3, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesCollisionSetAttractorStrength(particles_collision RID, strength float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesCollisionSetAttractorDirectionality(particles_collision RID, amount float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesCollisionSetAttractorAttenuation(particles_collision RID, curve float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesCollisionSetFieldTexture(particles_collision RID, texture RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesCollisionHeightFieldUpdate(particles_collision RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ParticlesCollisionSetHeightFieldResolution(particles_collision RID, resolution RenderingServerParticlesCollisionHeightfieldResolution, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) FogVolumeCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) FogVolumeSetShape(fog_volume RID, shape RenderingServerFogVolumeShape, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) FogVolumeSetSize(fog_volume RID, size Vector3, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) FogVolumeSetMaterial(fog_volume RID, material RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) VisibilityNotifierCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) VisibilityNotifierSetAabb(notifier RID, aabb AABB, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) VisibilityNotifierSetCallbacks(notifier RID, enter_callable Callable, exit_callable Callable, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) OccluderCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) OccluderSetMesh(occluder RID, vertices PackedVector3Array, indices PackedInt32Array, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CameraCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CameraSetPerspective(camera RID, fovy_degrees float32, z_near float32, z_far float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CameraSetOrthogonal(camera RID, size float32, z_near float32, z_far float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CameraSetFrustum(camera RID, size float32, offset Vector2, z_near float32, z_far float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CameraSetTransform(camera RID, transform Transform3D, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CameraSetCullMask(camera RID, layers int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CameraSetEnvironment(camera RID, env RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CameraSetCameraAttributes(camera RID, effects RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CameraSetUseVerticalAspect(camera RID, enable bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetUseXr(viewport RID, use_xr bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetSize(viewport RID, width int, height int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetActive(viewport RID, active bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetParentViewport(viewport RID, parent_viewport RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportAttachToScreen(viewport RID, rect Rect2, screen int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetRenderDirectToScreen(viewport RID, enabled bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetCanvasCullMask(viewport RID, canvas_cull_mask int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetScaling3DMode(viewport RID, scaling_3d_mode RenderingServerViewportScaling3DMode, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetScaling3DScale(viewport RID, scale float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetFsrSharpness(viewport RID, sharpness float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetTextureMipmapBias(viewport RID, mipmap_bias float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetUpdateMode(viewport RID, update_mode RenderingServerViewportUpdateMode, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetClearMode(viewport RID, clear_mode RenderingServerViewportClearMode, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportGetRenderTarget(viewport RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportGetTexture(viewport RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetDisable3D(viewport RID, disable bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetDisable2D(viewport RID, disable bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetEnvironmentMode(viewport RID, mode RenderingServerViewportEnvironmentMode, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportAttachCamera(viewport RID, camera RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetScenario(viewport RID, scenario RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportAttachCanvas(viewport RID, canvas RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportRemoveCanvas(viewport RID, canvas RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetSnap2DTransformsToPixel(viewport RID, enabled bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetSnap2DVerticesToPixel(viewport RID, enabled bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetDefaultCanvasItemTextureFilter(viewport RID, filter RenderingServerCanvasItemTextureFilter, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetDefaultCanvasItemTextureRepeat(viewport RID, repeat RenderingServerCanvasItemTextureRepeat, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetCanvasTransform(viewport RID, canvas RID, offset Transform2D, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetCanvasStacking(viewport RID, canvas RID, layer int, sublayer int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetTransparentBackground(viewport RID, enabled bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetGlobalCanvasTransform(viewport RID, transform Transform2D, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetSdfOversizeAndScale(viewport RID, oversize RenderingServerViewportSDFOversize, scale RenderingServerViewportSDFScale, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetPositionalShadowAtlasSize(viewport RID, size int, use_16_bits bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetPositionalShadowAtlasQuadrantSubdivision(viewport RID, quadrant int, subdivision int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetMsaa3D(viewport RID, msaa RenderingServerViewportMSAA, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetMsaa2D(viewport RID, msaa RenderingServerViewportMSAA, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetScreenSpaceAa(viewport RID, mode RenderingServerViewportScreenSpaceAA, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetUseTaa(viewport RID, enable bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetUseDebanding(viewport RID, enable bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetUseOcclusionCulling(viewport RID, enable bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetOcclusionRaysPerThread(rays_per_thread int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetOcclusionCullingBuildQuality(quality RenderingServerViewportOcclusionCullingBuildQuality, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportGetRenderInfo(viewport RID, type_ RenderingServerViewportRenderInfoType, info RenderingServerViewportRenderInfo, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetDebugDraw(viewport RID, draw RenderingServerViewportDebugDraw, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetMeasureRenderTime(viewport RID, enable bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportGetMeasuredRenderTimeCpu(viewport RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportGetMeasuredRenderTimeGpu(viewport RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetVrsMode(viewport RID, mode RenderingServerViewportVRSMode, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ViewportSetVrsTexture(viewport RID, texture RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) SkyCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) SkySetRadianceSize(sky RID, radiance_size int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) SkySetMode(sky RID, mode RenderingServerSkyMode, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) SkySetMaterial(sky RID, material RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) SkyBakePanorama(sky RID, energy float32, bake_irradiance bool, size Vector2i, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) EnvironmentCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) EnvironmentSetBackground(env RID, bg RenderingServerEnvironmentBG, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) EnvironmentSetSky(env RID, sky RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) EnvironmentSetSkyCustomFov(env RID, scale float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) EnvironmentSetSkyOrientation(env RID, orientation Basis, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) EnvironmentSetBgColor(env RID, color Color, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) EnvironmentSetBgEnergy(env RID, multiplier float32, exposure_value float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) EnvironmentSetCanvasMaxLayer(env RID, max_layer int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) EnvironmentSetAmbientLight(env RID, color Color, ambient RenderingServerEnvironmentAmbientSource, energy float32, sky_contibution float32, reflection_source RenderingServerEnvironmentReflectionSource, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) EnvironmentSetGlow(env RID, enable bool, levels PackedFloat32Array, intensity float32, strength float32, mix float32, bloom_threshold float32, blend_mode RenderingServerEnvironmentGlowBlendMode, hdr_bleed_threshold float32, hdr_bleed_scale float32, hdr_luminance_cap float32, glow_map_strength float32, glow_map RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) EnvironmentSetTonemap(env RID, tone_mapper RenderingServerEnvironmentToneMapper, exposure float32, white float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) EnvironmentSetAdjustment(env RID, enable bool, brightness float32, contrast float32, saturation float32, use_1d_color_correction bool, color_correction RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) EnvironmentSetSsr(env RID, enable bool, max_steps int, fade_in float32, fade_out float32, depth_tolerance float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) EnvironmentSetSsao(env RID, enable bool, radius float32, intensity float32, power float32, detail float32, horizon float32, sharpness float32, light_affect float32, ao_channel_affect float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) EnvironmentSetFog(env RID, enable bool, light_color Color, light_energy float32, sun_scatter float32, density float32, height float32, height_density float32, aerial_perspective float32, sky_affect float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) EnvironmentSetSdfgi(env RID, enable bool, cascades int, min_cell_size float32, y_scale RenderingServerEnvironmentSDFGIYScale, use_occlusion bool, bounce_feedback float32, read_sky bool, energy float32, normal_bias float32, probe_bias float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) EnvironmentSetVolumetricFog(env RID, enable bool, density float32, albedo Color, emission Color, emission_energy float32, anisotropy float32, length float32, p_detail_spread float32, gi_inject float32, temporal_reprojection bool, temporal_reprojection_amount float32, ambient_inject float32, sky_affect float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) EnvironmentGlowSetUseBicubicUpscale(enable bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) EnvironmentSetSsrRoughnessQuality(quality RenderingServerEnvironmentSSRRoughnessQuality, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) EnvironmentSetSsaoQuality(quality RenderingServerEnvironmentSSAOQuality, half_size bool, adaptive_target float32, blur_passes int, fadeout_from float32, fadeout_to float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) EnvironmentSetSsilQuality(quality RenderingServerEnvironmentSSILQuality, half_size bool, adaptive_target float32, blur_passes int, fadeout_from float32, fadeout_to float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) EnvironmentSetSdfgiRayCount(ray_count RenderingServerEnvironmentSDFGIRayCount, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) EnvironmentSetSdfgiFramesToConverge(frames RenderingServerEnvironmentSDFGIFramesToConverge, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) EnvironmentSetSdfgiFramesToUpdateLight(frames RenderingServerEnvironmentSDFGIFramesToUpdateLight, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) EnvironmentSetVolumetricFogVolumeSize(size int, depth int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) EnvironmentSetVolumetricFogFilterActive(active bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) EnvironmentBakePanorama(environment RID, bake_irradiance bool, size Vector2i, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ScreenSpaceRoughnessLimiterSetActive(enable bool, amount float32, limit float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) SubSurfaceScatteringSetQuality(quality RenderingServerSubSurfaceScatteringQuality, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) SubSurfaceScatteringSetScale(scale float32, depth_scale float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CameraAttributesCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CameraAttributesSetDofBlurQuality(quality RenderingServerDOFBlurQuality, use_jitter bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CameraAttributesSetDofBlurBokehShape(shape RenderingServerDOFBokehShape, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CameraAttributesSetDofBlur(camera_attributes RID, far_enable bool, far_distance float32, far_transition float32, near_enable bool, near_distance float32, near_transition float32, amount float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CameraAttributesSetExposure(camera_attributes RID, multiplier float32, normalization float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CameraAttributesSetAutoExposure(camera_attributes RID, enable bool, min_sensitivity float32, max_sensitivity float32, speed float32, scale float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ScenarioCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ScenarioSetEnvironment(scenario RID, environment RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ScenarioSetFallbackEnvironment(scenario RID, environment RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ScenarioSetCameraAttributes(scenario RID, effects RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstanceCreate2(base RID, scenario RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstanceCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstanceSetBase(instance RID, base RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstanceSetScenario(instance RID, scenario RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstanceSetLayerMask(instance RID, mask int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstanceSetPivotData(instance RID, sorting_offset float32, use_aabb_center bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstanceSetTransform(instance RID, transform Transform3D, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstanceAttachObjectInstanceId(instance RID, id int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstanceSetBlendShapeWeight(instance RID, shape int, weight float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstanceSetSurfaceOverrideMaterial(instance RID, surface int, material RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstanceSetVisible(instance RID, visible bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstanceGeometrySetTransparency(instance RID, transparency float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstanceSetCustomAabb(instance RID, aabb AABB, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstanceAttachSkeleton(instance RID, skeleton RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstanceSetExtraVisibilityMargin(instance RID, margin float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstanceSetVisibilityParent(instance RID, parent RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstanceSetIgnoreCulling(instance RID, enabled bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstanceGeometrySetFlag(instance RID, flag RenderingServerInstanceFlags, enabled bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstanceGeometrySetCastShadowsSetting(instance RID, shadow_casting_setting RenderingServerShadowCastingSetting, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstanceGeometrySetMaterialOverride(instance RID, material RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstanceGeometrySetMaterialOverlay(instance RID, material RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstanceGeometrySetVisibilityRange(instance RID, min float32, max float32, min_margin float32, max_margin float32, fade_mode RenderingServerVisibilityRangeFadeMode, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstanceGeometrySetLightmap(instance RID, lightmap RID, lightmap_uv_scale Rect2, lightmap_slice int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstanceGeometrySetLodBias(instance RID, lod_bias float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstanceGeometrySetShaderParameter(instance RID, parameter StringName, value Variant, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstanceGeometryGetShaderParameter(instance RID, parameter StringName, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstanceGeometryGetShaderParameterDefaultValue(instance RID, parameter StringName, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstanceGeometryGetShaderParameterList(instance RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstancesCullAabb(aabb AABB, scenario RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstancesCullRay(from Vector3, to Vector3, scenario RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) InstancesCullConvex(convex Plane, scenario RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) BakeRenderUv2(base RID, material_overrides RID, image_size Vector2i, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasSetItemMirroring(canvas RID, item RID, mirroring Vector2, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasSetModulate(canvas RID, color Color, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasSetDisableScale(disable bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasTextureCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasTextureSetChannel(canvas_texture RID, channel RenderingServerCanvasTextureChannel, texture RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasTextureSetShadingParameters(canvas_texture RID, base_color Color, shininess float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasTextureSetTextureFilter(canvas_texture RID, filter RenderingServerCanvasItemTextureFilter, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasTextureSetTextureRepeat(canvas_texture RID, repeat RenderingServerCanvasItemTextureRepeat, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemSetParent(item RID, parent RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemSetDefaultTextureFilter(item RID, filter RenderingServerCanvasItemTextureFilter, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemSetDefaultTextureRepeat(item RID, repeat RenderingServerCanvasItemTextureRepeat, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemSetVisible(item RID, visible bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemSetLightMask(item RID, mask int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemSetVisibilityLayer(item RID, visibility_layer int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemSetTransform(item RID, transform Transform2D, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemSetClip(item RID, clip bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemSetDistanceFieldMode(item RID, enabled bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemSetCustomRect(item RID, use_custom_rect bool, rect Rect2, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemSetModulate(item RID, color Color, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemSetSelfModulate(item RID, color Color, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemSetDrawBehindParent(item RID, enabled bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemAddLine(item RID, from Vector2, to Vector2, color Color, width float32, antialiased bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemAddPolyline(item RID, points PackedVector2Array, colors PackedColorArray, width float32, antialiased bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemAddMultiline(item RID, points PackedVector2Array, colors PackedColorArray, width float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemAddRect(item RID, rect Rect2, color Color, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemAddCircle(item RID, pos Vector2, radius float32, color Color, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemAddTextureRect(item RID, rect Rect2, texture RID, tile bool, modulate Color, transpose bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemAddMsdfTextureRectRegion(item RID, rect Rect2, texture RID, src_rect Rect2, modulate Color, outline_size int, px_range float32, scale float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemAddLcdTextureRectRegion(item RID, rect Rect2, texture RID, src_rect Rect2, modulate Color, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemAddTextureRectRegion(item RID, rect Rect2, texture RID, src_rect Rect2, modulate Color, transpose bool, clip_uv bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemAddNinePatch(item RID, rect Rect2, source Rect2, texture RID, topleft Vector2, bottomright Vector2, x_axis_mode RenderingServerNinePatchAxisMode, y_axis_mode RenderingServerNinePatchAxisMode, draw_center bool, modulate Color, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemAddPrimitive(item RID, points PackedVector2Array, colors PackedColorArray, uvs PackedVector2Array, texture RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemAddPolygon(item RID, points PackedVector2Array, colors PackedColorArray, uvs PackedVector2Array, texture RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemAddTriangleArray(item RID, indices PackedInt32Array, points PackedVector2Array, colors PackedColorArray, uvs PackedVector2Array, bones PackedInt32Array, weights PackedFloat32Array, texture RID, count int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemAddMesh(item RID, mesh RID, transform Transform2D, modulate Color, texture RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemAddMultimesh(item RID, mesh RID, texture RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemAddParticles(item RID, particles RID, texture RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemAddSetTransform(item RID, transform Transform2D, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemAddClipIgnore(item RID, ignore bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemAddAnimationSlice(item RID, animation_length float32, slice_begin float32, slice_end float32, offset float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemSetSortChildrenByY(item RID, enabled bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemSetZIndex(item RID, z_index int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemSetZAsRelativeToParent(item RID, enabled bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemSetCopyToBackbuffer(item RID, enabled bool, rect Rect2, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemClear(item RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemSetDrawIndex(item RID, index int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemSetMaterial(item RID, material RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemSetUseParentMaterial(item RID, enabled bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemSetVisibilityNotifier(item RID, enable bool, area Rect2, enter_callable Callable, exit_callable Callable, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasItemSetCanvasGroupMode(item RID, mode RenderingServerCanvasGroupMode, clear_margin float32, fit_empty bool, fit_margin float32, blur_mipmaps bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasLightCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasLightAttachToCanvas(light RID, canvas RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasLightSetEnabled(light RID, enabled bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasLightSetTextureScale(light RID, scale float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasLightSetTransform(light RID, transform Transform2D, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasLightSetTexture(light RID, texture RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasLightSetTextureOffset(light RID, offset Vector2, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasLightSetColor(light RID, color Color, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasLightSetHeight(light RID, height float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasLightSetEnergy(light RID, energy float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasLightSetZRange(light RID, min_z int, max_z int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasLightSetLayerRange(light RID, min_layer int, max_layer int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasLightSetItemCullMask(light RID, mask int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasLightSetItemShadowCullMask(light RID, mask int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasLightSetMode(light RID, mode RenderingServerCanvasLightMode, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasLightSetShadowEnabled(light RID, enabled bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasLightSetShadowFilter(light RID, filter RenderingServerCanvasLightShadowFilter, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasLightSetShadowColor(light RID, color Color, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasLightSetShadowSmooth(light RID, smooth float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasLightSetBlendMode(light RID, mode RenderingServerCanvasLightBlendMode, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasLightOccluderCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasLightOccluderAttachToCanvas(occluder RID, canvas RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasLightOccluderSetEnabled(occluder RID, enabled bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasLightOccluderSetPolygon(occluder RID, polygon RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasLightOccluderSetAsSdfCollision(occluder RID, enable bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasLightOccluderSetTransform(occluder RID, transform Transform2D, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasLightOccluderSetLightMask(occluder RID, mask int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasOccluderPolygonCreate()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasOccluderPolygonSetShape(occluder_polygon RID, shape PackedVector2Array, closed bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasOccluderPolygonSetCullMode(occluder_polygon RID, mode RenderingServerCanvasOccluderPolygonCullMode, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CanvasSetShadowTextureSize(size int, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) GlobalShaderParameterAdd(name StringName, type_ RenderingServerGlobalShaderParameterType, default_value Variant, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) GlobalShaderParameterRemove(name StringName, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) GlobalShaderParameterGetList()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) GlobalShaderParameterSet(name StringName, value Variant, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) GlobalShaderParameterSetOverride(name StringName, value Variant, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) GlobalShaderParameterGet(name StringName, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) GlobalShaderParameterGetType(name StringName, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) FreeRid(rid RID, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) RequestFrameDrawnCallback(callable Callable, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) HasChanged()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) GetRenderingInfo(info RenderingServerRenderingInfo, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) GetVideoAdapterName()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) GetVideoAdapterVendor()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) GetVideoAdapterType()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) GetVideoAdapterApiVersion()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) MakeSphereMesh(latitudes int, longitudes int, radius float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) GetTestCube()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) GetTestTexture()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) GetWhiteTexture()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) SetBootImage(image Image, color Color, scale bool, use_filter bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) GetDefaultClearColor()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) SetDefaultClearColor(color Color, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) HasFeature(feature RenderingServerFeatures, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) HasOsFeature(feature String, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) SetDebugGenerateWireframes(generate bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) IsRenderLoopEnabled()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) SetRenderLoopEnabled(enabled bool, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) GetFrameSetupTimeCpu()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ForceSync()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) ForceDraw(swap_buffers bool, frame_step float32, )  {
  panic("TODO: implement")
}

func  (me *RenderingServer) GetRenderingDevice()  {
  panic("TODO: implement")
}

func  (me *RenderingServer) CreateLocalRenderingDevice()  {
  panic("TODO: implement")
}

// TODO: properties (class)

// TODO: signals (class)
