// Code generated by cgen. DO NOT EDIT.
package gdc

import (
	"unsafe"
)

// #cgo CFLAGS: -I${SRCDIR}/../gdraw
/*
#include <gdextension_interface.h>

GDExtensionObjectPtr cgo_ClassCreationInfoCreateInstanceFunc(void* pUserdata);
void cgo_ClassCreationInfoFreeInstanceFunc(void* pUserdata, GDExtensionClassInstancePtr pInstance);
void cgo_ClassCreationInfoFreePropertyListFunc(GDExtensionClassInstancePtr pInstance, GDExtensionPropertyInfo* pList);
GDExtensionBool cgo_ClassCreationInfoGetFunc(GDExtensionClassInstancePtr pInstance, GDExtensionConstStringNamePtr pName, GDExtensionVariantPtr rRet);
GDExtensionPropertyInfo* cgo_ClassCreationInfoGetPropertyListFunc(GDExtensionClassInstancePtr pInstance, unsigned* rCount);
uint64_t cgo_ClassCreationInfoGetRidFunc(GDExtensionClassInstancePtr pInstance);
GDExtensionClassCallVirtual cgo_ClassCreationInfoGetVirtualFunc(void* pUserdata, GDExtensionConstStringNamePtr pName);
void cgo_ClassCreationInfoNotificationFunc(GDExtensionClassInstancePtr pInstance, int32_t pWhat);
GDExtensionBool cgo_ClassCreationInfoPropertyCanRevertFunc(GDExtensionClassInstancePtr pInstance, GDExtensionConstStringNamePtr pName);
GDExtensionBool cgo_ClassCreationInfoPropertyGetRevertFunc(GDExtensionClassInstancePtr pInstance, GDExtensionConstStringNamePtr pName, GDExtensionVariantPtr rRet);
void cgo_ClassCreationInfoReferenceFunc(GDExtensionClassInstancePtr pInstance);
GDExtensionBool cgo_ClassCreationInfoSetFunc(GDExtensionClassInstancePtr pInstance, GDExtensionConstStringNamePtr pName, GDExtensionConstVariantPtr pValue);
void cgo_ClassCreationInfoToStringFunc(GDExtensionClassInstancePtr pInstance, uint8_t* rIsValid, GDExtensionStringPtr pOut);
void cgo_ClassCreationInfoUnreferenceFunc(GDExtensionClassInstancePtr pInstance);
void cgo_ClassMethodInfoCallFunc(void* methodUserdata, GDExtensionClassInstancePtr pInstance,  GDExtensionConstVariantPtr* pArgs, GDExtensionInt pArgumentCount, GDExtensionVariantPtr rReturn, GDExtensionCallError* rError);
void cgo_ClassMethodInfoPtrcallFunc(void* methodUserdata, GDExtensionClassInstancePtr pInstance,  GDExtensionConstTypePtr* pArgs, GDExtensionTypePtr rRet);
void cgo_InitializationDeinitialize(void* userdata, GDExtensionInitializationLevel pLevel);
void cgo_InitializationInitialize(void* userdata, GDExtensionInitializationLevel pLevel);
void* cgo_InstanceBindingCallbacksCreateCallback(void* pToken, void* pInstance);
void cgo_InstanceBindingCallbacksFreeCallback(void* pToken, void* pInstance, void* pBinding);
GDExtensionBool cgo_InstanceBindingCallbacksReferenceCallback(void* pToken, void* pBinding, GDExtensionBool pReference);
void cgo_ScriptInstanceInfoCallFunc(GDExtensionScriptInstanceDataPtr pSelf, GDExtensionConstStringNamePtr pMethod,  GDExtensionConstVariantPtr* pArgs, GDExtensionInt pArgumentCount, GDExtensionVariantPtr rReturn, GDExtensionCallError* rError);
void cgo_ScriptInstanceInfoFreeFunc(GDExtensionScriptInstanceDataPtr pInstance);
void cgo_ScriptInstanceInfoFreeMethodListFunc(GDExtensionScriptInstanceDataPtr pInstance, GDExtensionMethodInfo* pList);
void cgo_ScriptInstanceInfoFreePropertyListFunc(GDExtensionScriptInstanceDataPtr pInstance, GDExtensionPropertyInfo* pList);
GDExtensionBool cgo_ScriptInstanceInfoGetFallbackFunc(GDExtensionScriptInstanceDataPtr pInstance, GDExtensionConstStringNamePtr pName, GDExtensionVariantPtr rRet);
GDExtensionBool cgo_ScriptInstanceInfoGetFunc(GDExtensionScriptInstanceDataPtr pInstance, GDExtensionConstStringNamePtr pName, GDExtensionVariantPtr rRet);
GDExtensionScriptLanguagePtr cgo_ScriptInstanceInfoGetLanguageFunc(GDExtensionScriptInstanceDataPtr pInstance);
GDExtensionMethodInfo* cgo_ScriptInstanceInfoGetMethodListFunc(GDExtensionScriptInstanceDataPtr pInstance, unsigned* rCount);
GDExtensionObjectPtr cgo_ScriptInstanceInfoGetOwnerFunc(GDExtensionScriptInstanceDataPtr pInstance);
GDExtensionPropertyInfo* cgo_ScriptInstanceInfoGetPropertyListFunc(GDExtensionScriptInstanceDataPtr pInstance, unsigned* rCount);
void cgo_ScriptInstanceInfoGetPropertyStateFunc(GDExtensionScriptInstanceDataPtr pInstance, GDExtensionScriptInstancePropertyStateAdd pAddFunc, void* pUserdata);
GDExtensionVariantType cgo_ScriptInstanceInfoGetPropertyTypeFunc(GDExtensionScriptInstanceDataPtr pInstance, GDExtensionConstStringNamePtr pName, uint8_t* rIsValid);
GDExtensionObjectPtr cgo_ScriptInstanceInfoGetScriptFunc(GDExtensionScriptInstanceDataPtr pInstance);
GDExtensionBool cgo_ScriptInstanceInfoHasMethodFunc(GDExtensionScriptInstanceDataPtr pInstance, GDExtensionConstStringNamePtr pName);
GDExtensionBool cgo_ScriptInstanceInfoIsPlaceholderFunc(GDExtensionScriptInstanceDataPtr pInstance);
void cgo_ScriptInstanceInfoNotificationFunc(GDExtensionScriptInstanceDataPtr pInstance, int32_t pWhat);
GDExtensionBool cgo_ScriptInstanceInfoPropertyCanRevertFunc(GDExtensionScriptInstanceDataPtr pInstance, GDExtensionConstStringNamePtr pName);
GDExtensionBool cgo_ScriptInstanceInfoPropertyGetRevertFunc(GDExtensionScriptInstanceDataPtr pInstance, GDExtensionConstStringNamePtr pName, GDExtensionVariantPtr rRet);
GDExtensionBool cgo_ScriptInstanceInfoRefcountDecrementedFunc(GDExtensionScriptInstanceDataPtr pInstance);
void cgo_ScriptInstanceInfoRefcountIncrementedFunc(GDExtensionScriptInstanceDataPtr pInstance);
GDExtensionBool cgo_ScriptInstanceInfoSetFallbackFunc(GDExtensionScriptInstanceDataPtr pInstance, GDExtensionConstStringNamePtr pName, GDExtensionConstVariantPtr pValue);
GDExtensionBool cgo_ScriptInstanceInfoSetFunc(GDExtensionScriptInstanceDataPtr pInstance, GDExtensionConstStringNamePtr pName, GDExtensionConstVariantPtr pValue);
void cgo_ScriptInstanceInfoToStringFunc(GDExtensionScriptInstanceDataPtr pInstance, uint8_t* rIsValid, GDExtensionStringPtr rOut);
*/
import "C"

// Callbacks allows you to register callbacks that will be called from the C-side of the extension.
var Callbacks = newCallbacks()

type callbacks interface {
  // SetClassCreationInfoCreateInstanceFuncHandler sets the callback which will be used by GetClassCreationInfoCreateInstanceFuncCallback.
  SetClassCreationInfoCreateInstanceFuncHandler(fn func(pUserdata unsafe.Pointer, ) ObjectPtr)
  // GetClassCreationInfoCreateInstanceFuncCallback is a C-callable function that will call the Go callback set by SetClassCreationInfoCreateInstanceFuncHandler.
  GetClassCreationInfoCreateInstanceFuncCallback() ClassCreateInstance
  // SetClassCreationInfoFreeInstanceFuncHandler sets the callback which will be used by GetClassCreationInfoFreeInstanceFuncCallback.
  SetClassCreationInfoFreeInstanceFuncHandler(fn func(pUserdata unsafe.Pointer, pInstance ClassInstancePtr, ) )
  // GetClassCreationInfoFreeInstanceFuncCallback is a C-callable function that will call the Go callback set by SetClassCreationInfoFreeInstanceFuncHandler.
  GetClassCreationInfoFreeInstanceFuncCallback() ClassFreeInstance
  // SetClassCreationInfoFreePropertyListFuncHandler sets the callback which will be used by GetClassCreationInfoFreePropertyListFuncCallback.
  SetClassCreationInfoFreePropertyListFuncHandler(fn func(pInstance ClassInstancePtr, pList *PropertyInfo, ) )
  // GetClassCreationInfoFreePropertyListFuncCallback is a C-callable function that will call the Go callback set by SetClassCreationInfoFreePropertyListFuncHandler.
  GetClassCreationInfoFreePropertyListFuncCallback() ClassFreePropertyList
  // SetClassCreationInfoGetFuncHandler sets the callback which will be used by GetClassCreationInfoGetFuncCallback.
  SetClassCreationInfoGetFuncHandler(fn func(pInstance ClassInstancePtr, pName ConstStringNamePtr, rRet VariantPtr, ) Bool)
  // GetClassCreationInfoGetFuncCallback is a C-callable function that will call the Go callback set by SetClassCreationInfoGetFuncHandler.
  GetClassCreationInfoGetFuncCallback() ClassGet
  // SetClassCreationInfoGetPropertyListFuncHandler sets the callback which will be used by GetClassCreationInfoGetPropertyListFuncCallback.
  SetClassCreationInfoGetPropertyListFuncHandler(fn func(pInstance ClassInstancePtr, rCount *uint, ) *PropertyInfo)
  // GetClassCreationInfoGetPropertyListFuncCallback is a C-callable function that will call the Go callback set by SetClassCreationInfoGetPropertyListFuncHandler.
  GetClassCreationInfoGetPropertyListFuncCallback() ClassGetPropertyList
  // SetClassCreationInfoGetRidFuncHandler sets the callback which will be used by GetClassCreationInfoGetRidFuncCallback.
  SetClassCreationInfoGetRidFuncHandler(fn func(pInstance ClassInstancePtr, ) uint64)
  // GetClassCreationInfoGetRidFuncCallback is a C-callable function that will call the Go callback set by SetClassCreationInfoGetRidFuncHandler.
  GetClassCreationInfoGetRidFuncCallback() ClassGetRID
  // SetClassCreationInfoGetVirtualFuncHandler sets the callback which will be used by GetClassCreationInfoGetVirtualFuncCallback.
  SetClassCreationInfoGetVirtualFuncHandler(fn func(pUserdata unsafe.Pointer, pName ConstStringNamePtr, ) ClassCallVirtual)
  // GetClassCreationInfoGetVirtualFuncCallback is a C-callable function that will call the Go callback set by SetClassCreationInfoGetVirtualFuncHandler.
  GetClassCreationInfoGetVirtualFuncCallback() ClassGetVirtual
  // SetClassCreationInfoNotificationFuncHandler sets the callback which will be used by GetClassCreationInfoNotificationFuncCallback.
  SetClassCreationInfoNotificationFuncHandler(fn func(pInstance ClassInstancePtr, pWhat int, ) )
  // GetClassCreationInfoNotificationFuncCallback is a C-callable function that will call the Go callback set by SetClassCreationInfoNotificationFuncHandler.
  GetClassCreationInfoNotificationFuncCallback() ClassNotification
  // SetClassCreationInfoPropertyCanRevertFuncHandler sets the callback which will be used by GetClassCreationInfoPropertyCanRevertFuncCallback.
  SetClassCreationInfoPropertyCanRevertFuncHandler(fn func(pInstance ClassInstancePtr, pName ConstStringNamePtr, ) Bool)
  // GetClassCreationInfoPropertyCanRevertFuncCallback is a C-callable function that will call the Go callback set by SetClassCreationInfoPropertyCanRevertFuncHandler.
  GetClassCreationInfoPropertyCanRevertFuncCallback() ClassPropertyCanRevert
  // SetClassCreationInfoPropertyGetRevertFuncHandler sets the callback which will be used by GetClassCreationInfoPropertyGetRevertFuncCallback.
  SetClassCreationInfoPropertyGetRevertFuncHandler(fn func(pInstance ClassInstancePtr, pName ConstStringNamePtr, rRet VariantPtr, ) Bool)
  // GetClassCreationInfoPropertyGetRevertFuncCallback is a C-callable function that will call the Go callback set by SetClassCreationInfoPropertyGetRevertFuncHandler.
  GetClassCreationInfoPropertyGetRevertFuncCallback() ClassPropertyGetRevert
  // SetClassCreationInfoReferenceFuncHandler sets the callback which will be used by GetClassCreationInfoReferenceFuncCallback.
  SetClassCreationInfoReferenceFuncHandler(fn func(pInstance ClassInstancePtr, ) )
  // GetClassCreationInfoReferenceFuncCallback is a C-callable function that will call the Go callback set by SetClassCreationInfoReferenceFuncHandler.
  GetClassCreationInfoReferenceFuncCallback() ClassReference
  // SetClassCreationInfoSetFuncHandler sets the callback which will be used by GetClassCreationInfoSetFuncCallback.
  SetClassCreationInfoSetFuncHandler(fn func(pInstance ClassInstancePtr, pName ConstStringNamePtr, pValue ConstVariantPtr, ) Bool)
  // GetClassCreationInfoSetFuncCallback is a C-callable function that will call the Go callback set by SetClassCreationInfoSetFuncHandler.
  GetClassCreationInfoSetFuncCallback() ClassSet
  // SetClassCreationInfoToStringFuncHandler sets the callback which will be used by GetClassCreationInfoToStringFuncCallback.
  SetClassCreationInfoToStringFuncHandler(fn func(pInstance ClassInstancePtr, rIsValid *uint8, pOut StringPtr, ) )
  // GetClassCreationInfoToStringFuncCallback is a C-callable function that will call the Go callback set by SetClassCreationInfoToStringFuncHandler.
  GetClassCreationInfoToStringFuncCallback() ClassToString
  // SetClassCreationInfoUnreferenceFuncHandler sets the callback which will be used by GetClassCreationInfoUnreferenceFuncCallback.
  SetClassCreationInfoUnreferenceFuncHandler(fn func(pInstance ClassInstancePtr, ) )
  // GetClassCreationInfoUnreferenceFuncCallback is a C-callable function that will call the Go callback set by SetClassCreationInfoUnreferenceFuncHandler.
  GetClassCreationInfoUnreferenceFuncCallback() ClassUnreference
  // SetClassMethodInfoCallFuncHandler sets the callback which will be used by GetClassMethodInfoCallFuncCallback.
  SetClassMethodInfoCallFuncHandler(fn func(methodUserdata unsafe.Pointer, pInstance ClassInstancePtr, pArgs *ConstVariantPtr, pArgumentCount Int, rReturn VariantPtr, rError *CallError, ) )
  // GetClassMethodInfoCallFuncCallback is a C-callable function that will call the Go callback set by SetClassMethodInfoCallFuncHandler.
  GetClassMethodInfoCallFuncCallback() ClassMethodCall
  // SetClassMethodInfoPtrcallFuncHandler sets the callback which will be used by GetClassMethodInfoPtrcallFuncCallback.
  SetClassMethodInfoPtrcallFuncHandler(fn func(methodUserdata unsafe.Pointer, pInstance ClassInstancePtr, pArgs *ConstTypePtr, rRet TypePtr, ) )
  // GetClassMethodInfoPtrcallFuncCallback is a C-callable function that will call the Go callback set by SetClassMethodInfoPtrcallFuncHandler.
  GetClassMethodInfoPtrcallFuncCallback() ClassMethodPtrCall
  // SetInitializationDeinitializeHandler sets the callback which will be used by GetInitializationDeinitializeCallback.
  SetInitializationDeinitializeHandler(fn func(userdata unsafe.Pointer, pLevel InitializationLevel, ) )
  // GetInitializationDeinitializeCallback is a C-callable function that will call the Go callback set by SetInitializationDeinitializeHandler.
  GetInitializationDeinitializeCallback() InitializationDeinitializeFn
  // SetInitializationInitializeHandler sets the callback which will be used by GetInitializationInitializeCallback.
  SetInitializationInitializeHandler(fn func(userdata unsafe.Pointer, pLevel InitializationLevel, ) )
  // GetInitializationInitializeCallback is a C-callable function that will call the Go callback set by SetInitializationInitializeHandler.
  GetInitializationInitializeCallback() InitializationInitializeFn
  // SetInstanceBindingCallbacksCreateCallbackHandler sets the callback which will be used by GetInstanceBindingCallbacksCreateCallbackCallback.
  SetInstanceBindingCallbacksCreateCallbackHandler(fn func(pToken unsafe.Pointer, pInstance unsafe.Pointer, ) unsafe.Pointer)
  // GetInstanceBindingCallbacksCreateCallbackCallback is a C-callable function that will call the Go callback set by SetInstanceBindingCallbacksCreateCallbackHandler.
  GetInstanceBindingCallbacksCreateCallbackCallback() InstanceBindingCreateCallback
  // SetInstanceBindingCallbacksFreeCallbackHandler sets the callback which will be used by GetInstanceBindingCallbacksFreeCallbackCallback.
  SetInstanceBindingCallbacksFreeCallbackHandler(fn func(pToken unsafe.Pointer, pInstance unsafe.Pointer, pBinding unsafe.Pointer, ) )
  // GetInstanceBindingCallbacksFreeCallbackCallback is a C-callable function that will call the Go callback set by SetInstanceBindingCallbacksFreeCallbackHandler.
  GetInstanceBindingCallbacksFreeCallbackCallback() InstanceBindingFreeCallback
  // SetInstanceBindingCallbacksReferenceCallbackHandler sets the callback which will be used by GetInstanceBindingCallbacksReferenceCallbackCallback.
  SetInstanceBindingCallbacksReferenceCallbackHandler(fn func(pToken unsafe.Pointer, pBinding unsafe.Pointer, pReference Bool, ) Bool)
  // GetInstanceBindingCallbacksReferenceCallbackCallback is a C-callable function that will call the Go callback set by SetInstanceBindingCallbacksReferenceCallbackHandler.
  GetInstanceBindingCallbacksReferenceCallbackCallback() InstanceBindingReferenceCallback
  // SetScriptInstanceInfoCallFuncHandler sets the callback which will be used by GetScriptInstanceInfoCallFuncCallback.
  SetScriptInstanceInfoCallFuncHandler(fn func(pSelf ScriptInstanceDataPtr, pMethod ConstStringNamePtr, pArgs *ConstVariantPtr, pArgumentCount Int, rReturn VariantPtr, rError *CallError, ) )
  // GetScriptInstanceInfoCallFuncCallback is a C-callable function that will call the Go callback set by SetScriptInstanceInfoCallFuncHandler.
  GetScriptInstanceInfoCallFuncCallback() ScriptInstanceCall
  // SetScriptInstanceInfoFreeFuncHandler sets the callback which will be used by GetScriptInstanceInfoFreeFuncCallback.
  SetScriptInstanceInfoFreeFuncHandler(fn func(pInstance ScriptInstanceDataPtr, ) )
  // GetScriptInstanceInfoFreeFuncCallback is a C-callable function that will call the Go callback set by SetScriptInstanceInfoFreeFuncHandler.
  GetScriptInstanceInfoFreeFuncCallback() ScriptInstanceFree
  // SetScriptInstanceInfoFreeMethodListFuncHandler sets the callback which will be used by GetScriptInstanceInfoFreeMethodListFuncCallback.
  SetScriptInstanceInfoFreeMethodListFuncHandler(fn func(pInstance ScriptInstanceDataPtr, pList *MethodInfo, ) )
  // GetScriptInstanceInfoFreeMethodListFuncCallback is a C-callable function that will call the Go callback set by SetScriptInstanceInfoFreeMethodListFuncHandler.
  GetScriptInstanceInfoFreeMethodListFuncCallback() ScriptInstanceFreeMethodList
  // SetScriptInstanceInfoFreePropertyListFuncHandler sets the callback which will be used by GetScriptInstanceInfoFreePropertyListFuncCallback.
  SetScriptInstanceInfoFreePropertyListFuncHandler(fn func(pInstance ScriptInstanceDataPtr, pList *PropertyInfo, ) )
  // GetScriptInstanceInfoFreePropertyListFuncCallback is a C-callable function that will call the Go callback set by SetScriptInstanceInfoFreePropertyListFuncHandler.
  GetScriptInstanceInfoFreePropertyListFuncCallback() ScriptInstanceFreePropertyList
  // SetScriptInstanceInfoGetFallbackFuncHandler sets the callback which will be used by GetScriptInstanceInfoGetFallbackFuncCallback.
  SetScriptInstanceInfoGetFallbackFuncHandler(fn func(pInstance ScriptInstanceDataPtr, pName ConstStringNamePtr, rRet VariantPtr, ) Bool)
  // GetScriptInstanceInfoGetFallbackFuncCallback is a C-callable function that will call the Go callback set by SetScriptInstanceInfoGetFallbackFuncHandler.
  GetScriptInstanceInfoGetFallbackFuncCallback() ScriptInstanceGet
  // SetScriptInstanceInfoGetFuncHandler sets the callback which will be used by GetScriptInstanceInfoGetFuncCallback.
  SetScriptInstanceInfoGetFuncHandler(fn func(pInstance ScriptInstanceDataPtr, pName ConstStringNamePtr, rRet VariantPtr, ) Bool)
  // GetScriptInstanceInfoGetFuncCallback is a C-callable function that will call the Go callback set by SetScriptInstanceInfoGetFuncHandler.
  GetScriptInstanceInfoGetFuncCallback() ScriptInstanceGet
  // SetScriptInstanceInfoGetLanguageFuncHandler sets the callback which will be used by GetScriptInstanceInfoGetLanguageFuncCallback.
  SetScriptInstanceInfoGetLanguageFuncHandler(fn func(pInstance ScriptInstanceDataPtr, ) ScriptLanguagePtr)
  // GetScriptInstanceInfoGetLanguageFuncCallback is a C-callable function that will call the Go callback set by SetScriptInstanceInfoGetLanguageFuncHandler.
  GetScriptInstanceInfoGetLanguageFuncCallback() ScriptInstanceGetLanguage
  // SetScriptInstanceInfoGetMethodListFuncHandler sets the callback which will be used by GetScriptInstanceInfoGetMethodListFuncCallback.
  SetScriptInstanceInfoGetMethodListFuncHandler(fn func(pInstance ScriptInstanceDataPtr, rCount *uint, ) *MethodInfo)
  // GetScriptInstanceInfoGetMethodListFuncCallback is a C-callable function that will call the Go callback set by SetScriptInstanceInfoGetMethodListFuncHandler.
  GetScriptInstanceInfoGetMethodListFuncCallback() ScriptInstanceGetMethodList
  // SetScriptInstanceInfoGetOwnerFuncHandler sets the callback which will be used by GetScriptInstanceInfoGetOwnerFuncCallback.
  SetScriptInstanceInfoGetOwnerFuncHandler(fn func(pInstance ScriptInstanceDataPtr, ) ObjectPtr)
  // GetScriptInstanceInfoGetOwnerFuncCallback is a C-callable function that will call the Go callback set by SetScriptInstanceInfoGetOwnerFuncHandler.
  GetScriptInstanceInfoGetOwnerFuncCallback() ScriptInstanceGetOwner
  // SetScriptInstanceInfoGetPropertyListFuncHandler sets the callback which will be used by GetScriptInstanceInfoGetPropertyListFuncCallback.
  SetScriptInstanceInfoGetPropertyListFuncHandler(fn func(pInstance ScriptInstanceDataPtr, rCount *uint, ) *PropertyInfo)
  // GetScriptInstanceInfoGetPropertyListFuncCallback is a C-callable function that will call the Go callback set by SetScriptInstanceInfoGetPropertyListFuncHandler.
  GetScriptInstanceInfoGetPropertyListFuncCallback() ScriptInstanceGetPropertyList
  // SetScriptInstanceInfoGetPropertyStateFuncHandler sets the callback which will be used by GetScriptInstanceInfoGetPropertyStateFuncCallback.
  SetScriptInstanceInfoGetPropertyStateFuncHandler(fn func(pInstance ScriptInstanceDataPtr, pAddFunc ScriptInstancePropertyStateAdd, pUserdata unsafe.Pointer, ) )
  // GetScriptInstanceInfoGetPropertyStateFuncCallback is a C-callable function that will call the Go callback set by SetScriptInstanceInfoGetPropertyStateFuncHandler.
  GetScriptInstanceInfoGetPropertyStateFuncCallback() ScriptInstanceGetPropertyState
  // SetScriptInstanceInfoGetPropertyTypeFuncHandler sets the callback which will be used by GetScriptInstanceInfoGetPropertyTypeFuncCallback.
  SetScriptInstanceInfoGetPropertyTypeFuncHandler(fn func(pInstance ScriptInstanceDataPtr, pName ConstStringNamePtr, rIsValid *uint8, ) VariantType)
  // GetScriptInstanceInfoGetPropertyTypeFuncCallback is a C-callable function that will call the Go callback set by SetScriptInstanceInfoGetPropertyTypeFuncHandler.
  GetScriptInstanceInfoGetPropertyTypeFuncCallback() ScriptInstanceGetPropertyType
  // SetScriptInstanceInfoGetScriptFuncHandler sets the callback which will be used by GetScriptInstanceInfoGetScriptFuncCallback.
  SetScriptInstanceInfoGetScriptFuncHandler(fn func(pInstance ScriptInstanceDataPtr, ) ObjectPtr)
  // GetScriptInstanceInfoGetScriptFuncCallback is a C-callable function that will call the Go callback set by SetScriptInstanceInfoGetScriptFuncHandler.
  GetScriptInstanceInfoGetScriptFuncCallback() ScriptInstanceGetScript
  // SetScriptInstanceInfoHasMethodFuncHandler sets the callback which will be used by GetScriptInstanceInfoHasMethodFuncCallback.
  SetScriptInstanceInfoHasMethodFuncHandler(fn func(pInstance ScriptInstanceDataPtr, pName ConstStringNamePtr, ) Bool)
  // GetScriptInstanceInfoHasMethodFuncCallback is a C-callable function that will call the Go callback set by SetScriptInstanceInfoHasMethodFuncHandler.
  GetScriptInstanceInfoHasMethodFuncCallback() ScriptInstanceHasMethod
  // SetScriptInstanceInfoIsPlaceholderFuncHandler sets the callback which will be used by GetScriptInstanceInfoIsPlaceholderFuncCallback.
  SetScriptInstanceInfoIsPlaceholderFuncHandler(fn func(pInstance ScriptInstanceDataPtr, ) Bool)
  // GetScriptInstanceInfoIsPlaceholderFuncCallback is a C-callable function that will call the Go callback set by SetScriptInstanceInfoIsPlaceholderFuncHandler.
  GetScriptInstanceInfoIsPlaceholderFuncCallback() ScriptInstanceIsPlaceholder
  // SetScriptInstanceInfoNotificationFuncHandler sets the callback which will be used by GetScriptInstanceInfoNotificationFuncCallback.
  SetScriptInstanceInfoNotificationFuncHandler(fn func(pInstance ScriptInstanceDataPtr, pWhat int, ) )
  // GetScriptInstanceInfoNotificationFuncCallback is a C-callable function that will call the Go callback set by SetScriptInstanceInfoNotificationFuncHandler.
  GetScriptInstanceInfoNotificationFuncCallback() ScriptInstanceNotification
  // SetScriptInstanceInfoPropertyCanRevertFuncHandler sets the callback which will be used by GetScriptInstanceInfoPropertyCanRevertFuncCallback.
  SetScriptInstanceInfoPropertyCanRevertFuncHandler(fn func(pInstance ScriptInstanceDataPtr, pName ConstStringNamePtr, ) Bool)
  // GetScriptInstanceInfoPropertyCanRevertFuncCallback is a C-callable function that will call the Go callback set by SetScriptInstanceInfoPropertyCanRevertFuncHandler.
  GetScriptInstanceInfoPropertyCanRevertFuncCallback() ScriptInstancePropertyCanRevert
  // SetScriptInstanceInfoPropertyGetRevertFuncHandler sets the callback which will be used by GetScriptInstanceInfoPropertyGetRevertFuncCallback.
  SetScriptInstanceInfoPropertyGetRevertFuncHandler(fn func(pInstance ScriptInstanceDataPtr, pName ConstStringNamePtr, rRet VariantPtr, ) Bool)
  // GetScriptInstanceInfoPropertyGetRevertFuncCallback is a C-callable function that will call the Go callback set by SetScriptInstanceInfoPropertyGetRevertFuncHandler.
  GetScriptInstanceInfoPropertyGetRevertFuncCallback() ScriptInstancePropertyGetRevert
  // SetScriptInstanceInfoRefcountDecrementedFuncHandler sets the callback which will be used by GetScriptInstanceInfoRefcountDecrementedFuncCallback.
  SetScriptInstanceInfoRefcountDecrementedFuncHandler(fn func(pInstance ScriptInstanceDataPtr, ) Bool)
  // GetScriptInstanceInfoRefcountDecrementedFuncCallback is a C-callable function that will call the Go callback set by SetScriptInstanceInfoRefcountDecrementedFuncHandler.
  GetScriptInstanceInfoRefcountDecrementedFuncCallback() ScriptInstanceRefCountDecremented
  // SetScriptInstanceInfoRefcountIncrementedFuncHandler sets the callback which will be used by GetScriptInstanceInfoRefcountIncrementedFuncCallback.
  SetScriptInstanceInfoRefcountIncrementedFuncHandler(fn func(pInstance ScriptInstanceDataPtr, ) )
  // GetScriptInstanceInfoRefcountIncrementedFuncCallback is a C-callable function that will call the Go callback set by SetScriptInstanceInfoRefcountIncrementedFuncHandler.
  GetScriptInstanceInfoRefcountIncrementedFuncCallback() ScriptInstanceRefCountIncremented
  // SetScriptInstanceInfoSetFallbackFuncHandler sets the callback which will be used by GetScriptInstanceInfoSetFallbackFuncCallback.
  SetScriptInstanceInfoSetFallbackFuncHandler(fn func(pInstance ScriptInstanceDataPtr, pName ConstStringNamePtr, pValue ConstVariantPtr, ) Bool)
  // GetScriptInstanceInfoSetFallbackFuncCallback is a C-callable function that will call the Go callback set by SetScriptInstanceInfoSetFallbackFuncHandler.
  GetScriptInstanceInfoSetFallbackFuncCallback() ScriptInstanceSet
  // SetScriptInstanceInfoSetFuncHandler sets the callback which will be used by GetScriptInstanceInfoSetFuncCallback.
  SetScriptInstanceInfoSetFuncHandler(fn func(pInstance ScriptInstanceDataPtr, pName ConstStringNamePtr, pValue ConstVariantPtr, ) Bool)
  // GetScriptInstanceInfoSetFuncCallback is a C-callable function that will call the Go callback set by SetScriptInstanceInfoSetFuncHandler.
  GetScriptInstanceInfoSetFuncCallback() ScriptInstanceSet
  // SetScriptInstanceInfoToStringFuncHandler sets the callback which will be used by GetScriptInstanceInfoToStringFuncCallback.
  SetScriptInstanceInfoToStringFuncHandler(fn func(pInstance ScriptInstanceDataPtr, rIsValid *uint8, rOut StringPtr, ) )
  // GetScriptInstanceInfoToStringFuncCallback is a C-callable function that will call the Go callback set by SetScriptInstanceInfoToStringFuncHandler.
  GetScriptInstanceInfoToStringFuncCallback() ScriptInstanceToString
}

type callbacksImpl struct {
  fnClassCreationInfoCreateInstanceFunc func(pUserdata unsafe.Pointer, ) ObjectPtr
  fnClassCreationInfoFreeInstanceFunc func(pUserdata unsafe.Pointer, pInstance ClassInstancePtr, ) 
  fnClassCreationInfoFreePropertyListFunc func(pInstance ClassInstancePtr, pList *PropertyInfo, ) 
  fnClassCreationInfoGetFunc func(pInstance ClassInstancePtr, pName ConstStringNamePtr, rRet VariantPtr, ) Bool
  fnClassCreationInfoGetPropertyListFunc func(pInstance ClassInstancePtr, rCount *uint, ) *PropertyInfo
  fnClassCreationInfoGetRidFunc func(pInstance ClassInstancePtr, ) uint64
  fnClassCreationInfoGetVirtualFunc func(pUserdata unsafe.Pointer, pName ConstStringNamePtr, ) ClassCallVirtual
  fnClassCreationInfoNotificationFunc func(pInstance ClassInstancePtr, pWhat int, ) 
  fnClassCreationInfoPropertyCanRevertFunc func(pInstance ClassInstancePtr, pName ConstStringNamePtr, ) Bool
  fnClassCreationInfoPropertyGetRevertFunc func(pInstance ClassInstancePtr, pName ConstStringNamePtr, rRet VariantPtr, ) Bool
  fnClassCreationInfoReferenceFunc func(pInstance ClassInstancePtr, ) 
  fnClassCreationInfoSetFunc func(pInstance ClassInstancePtr, pName ConstStringNamePtr, pValue ConstVariantPtr, ) Bool
  fnClassCreationInfoToStringFunc func(pInstance ClassInstancePtr, rIsValid *uint8, pOut StringPtr, ) 
  fnClassCreationInfoUnreferenceFunc func(pInstance ClassInstancePtr, ) 
  fnClassMethodInfoCallFunc func(methodUserdata unsafe.Pointer, pInstance ClassInstancePtr, pArgs *ConstVariantPtr, pArgumentCount Int, rReturn VariantPtr, rError *CallError, ) 
  fnClassMethodInfoPtrcallFunc func(methodUserdata unsafe.Pointer, pInstance ClassInstancePtr, pArgs *ConstTypePtr, rRet TypePtr, ) 
  fnInitializationDeinitialize func(userdata unsafe.Pointer, pLevel InitializationLevel, ) 
  fnInitializationInitialize func(userdata unsafe.Pointer, pLevel InitializationLevel, ) 
  fnInstanceBindingCallbacksCreateCallback func(pToken unsafe.Pointer, pInstance unsafe.Pointer, ) unsafe.Pointer
  fnInstanceBindingCallbacksFreeCallback func(pToken unsafe.Pointer, pInstance unsafe.Pointer, pBinding unsafe.Pointer, ) 
  fnInstanceBindingCallbacksReferenceCallback func(pToken unsafe.Pointer, pBinding unsafe.Pointer, pReference Bool, ) Bool
  fnScriptInstanceInfoCallFunc func(pSelf ScriptInstanceDataPtr, pMethod ConstStringNamePtr, pArgs *ConstVariantPtr, pArgumentCount Int, rReturn VariantPtr, rError *CallError, ) 
  fnScriptInstanceInfoFreeFunc func(pInstance ScriptInstanceDataPtr, ) 
  fnScriptInstanceInfoFreeMethodListFunc func(pInstance ScriptInstanceDataPtr, pList *MethodInfo, ) 
  fnScriptInstanceInfoFreePropertyListFunc func(pInstance ScriptInstanceDataPtr, pList *PropertyInfo, ) 
  fnScriptInstanceInfoGetFallbackFunc func(pInstance ScriptInstanceDataPtr, pName ConstStringNamePtr, rRet VariantPtr, ) Bool
  fnScriptInstanceInfoGetFunc func(pInstance ScriptInstanceDataPtr, pName ConstStringNamePtr, rRet VariantPtr, ) Bool
  fnScriptInstanceInfoGetLanguageFunc func(pInstance ScriptInstanceDataPtr, ) ScriptLanguagePtr
  fnScriptInstanceInfoGetMethodListFunc func(pInstance ScriptInstanceDataPtr, rCount *uint, ) *MethodInfo
  fnScriptInstanceInfoGetOwnerFunc func(pInstance ScriptInstanceDataPtr, ) ObjectPtr
  fnScriptInstanceInfoGetPropertyListFunc func(pInstance ScriptInstanceDataPtr, rCount *uint, ) *PropertyInfo
  fnScriptInstanceInfoGetPropertyStateFunc func(pInstance ScriptInstanceDataPtr, pAddFunc ScriptInstancePropertyStateAdd, pUserdata unsafe.Pointer, ) 
  fnScriptInstanceInfoGetPropertyTypeFunc func(pInstance ScriptInstanceDataPtr, pName ConstStringNamePtr, rIsValid *uint8, ) VariantType
  fnScriptInstanceInfoGetScriptFunc func(pInstance ScriptInstanceDataPtr, ) ObjectPtr
  fnScriptInstanceInfoHasMethodFunc func(pInstance ScriptInstanceDataPtr, pName ConstStringNamePtr, ) Bool
  fnScriptInstanceInfoIsPlaceholderFunc func(pInstance ScriptInstanceDataPtr, ) Bool
  fnScriptInstanceInfoNotificationFunc func(pInstance ScriptInstanceDataPtr, pWhat int, ) 
  fnScriptInstanceInfoPropertyCanRevertFunc func(pInstance ScriptInstanceDataPtr, pName ConstStringNamePtr, ) Bool
  fnScriptInstanceInfoPropertyGetRevertFunc func(pInstance ScriptInstanceDataPtr, pName ConstStringNamePtr, rRet VariantPtr, ) Bool
  fnScriptInstanceInfoRefcountDecrementedFunc func(pInstance ScriptInstanceDataPtr, ) Bool
  fnScriptInstanceInfoRefcountIncrementedFunc func(pInstance ScriptInstanceDataPtr, ) 
  fnScriptInstanceInfoSetFallbackFunc func(pInstance ScriptInstanceDataPtr, pName ConstStringNamePtr, pValue ConstVariantPtr, ) Bool
  fnScriptInstanceInfoSetFunc func(pInstance ScriptInstanceDataPtr, pName ConstStringNamePtr, pValue ConstVariantPtr, ) Bool
  fnScriptInstanceInfoToStringFunc func(pInstance ScriptInstanceDataPtr, rIsValid *uint8, rOut StringPtr, ) 
}

func newCallbacks() *callbacksImpl {
  return &callbacksImpl{}
}

var _ callbacks = (*callbacksImpl)(nil)

func transformPointer[T, U any](fn U) T {
	return *(*T)(unsafe.Pointer(&fn))
}


func (me *callbacksImpl) SetClassCreationInfoCreateInstanceFuncHandler(fn func(pUserdata unsafe.Pointer, ) ObjectPtr) {
  me.fnClassCreationInfoCreateInstanceFunc = fn
}

//export cgo_ClassCreationInfoCreateInstanceFunc
func cgo_ClassCreationInfoCreateInstanceFunc(pUserdata unsafe.Pointer, ) C.GDExtensionObjectPtr {
  ret := Callbacks.fnClassCreationInfoCreateInstanceFunc(unsafe.Pointer(pUserdata), )
  return C.GDExtensionObjectPtr(ret)
}

func (me *callbacksImpl) GetClassCreationInfoCreateInstanceFuncCallback() ClassCreateInstance {
  return transformPointer[ClassCreateInstance](C.cgo_ClassCreationInfoCreateInstanceFunc)
}

func (me *callbacksImpl) SetClassCreationInfoFreeInstanceFuncHandler(fn func(pUserdata unsafe.Pointer, pInstance ClassInstancePtr, ) ) {
  me.fnClassCreationInfoFreeInstanceFunc = fn
}

//export cgo_ClassCreationInfoFreeInstanceFunc
func cgo_ClassCreationInfoFreeInstanceFunc(pUserdata unsafe.Pointer, pInstance C.GDExtensionClassInstancePtr, )  {
  Callbacks.fnClassCreationInfoFreeInstanceFunc(unsafe.Pointer(pUserdata), ClassInstancePtr(pInstance), )
}

func (me *callbacksImpl) GetClassCreationInfoFreeInstanceFuncCallback() ClassFreeInstance {
  return transformPointer[ClassFreeInstance](C.cgo_ClassCreationInfoFreeInstanceFunc)
}

func (me *callbacksImpl) SetClassCreationInfoFreePropertyListFuncHandler(fn func(pInstance ClassInstancePtr, pList *PropertyInfo, ) ) {
  me.fnClassCreationInfoFreePropertyListFunc = fn
}

//export cgo_ClassCreationInfoFreePropertyListFunc
func cgo_ClassCreationInfoFreePropertyListFunc(pInstance C.GDExtensionClassInstancePtr, pList *C.GDExtensionPropertyInfo, )  {
  Callbacks.fnClassCreationInfoFreePropertyListFunc(ClassInstancePtr(pInstance), (*PropertyInfo)(unsafe.Pointer(pList)), )
}

func (me *callbacksImpl) GetClassCreationInfoFreePropertyListFuncCallback() ClassFreePropertyList {
  return transformPointer[ClassFreePropertyList](C.cgo_ClassCreationInfoFreePropertyListFunc)
}

func (me *callbacksImpl) SetClassCreationInfoGetFuncHandler(fn func(pInstance ClassInstancePtr, pName ConstStringNamePtr, rRet VariantPtr, ) Bool) {
  me.fnClassCreationInfoGetFunc = fn
}

//export cgo_ClassCreationInfoGetFunc
func cgo_ClassCreationInfoGetFunc(pInstance C.GDExtensionClassInstancePtr, pName C.GDExtensionConstStringNamePtr, rRet C.GDExtensionVariantPtr, ) C.GDExtensionBool {
  ret := Callbacks.fnClassCreationInfoGetFunc(ClassInstancePtr(pInstance), ConstStringNamePtr(pName), VariantPtr(rRet), )
  return C.GDExtensionBool(ret)
}

func (me *callbacksImpl) GetClassCreationInfoGetFuncCallback() ClassGet {
  return transformPointer[ClassGet](C.cgo_ClassCreationInfoGetFunc)
}

func (me *callbacksImpl) SetClassCreationInfoGetPropertyListFuncHandler(fn func(pInstance ClassInstancePtr, rCount *uint, ) *PropertyInfo) {
  me.fnClassCreationInfoGetPropertyListFunc = fn
}

//export cgo_ClassCreationInfoGetPropertyListFunc
func cgo_ClassCreationInfoGetPropertyListFunc(pInstance C.GDExtensionClassInstancePtr, rCount *C.unsigned, ) *C.GDExtensionPropertyInfo {
  ret := Callbacks.fnClassCreationInfoGetPropertyListFunc(ClassInstancePtr(pInstance), *(**uint)(unsafe.Pointer(&rCount)), )
  return (*C.GDExtensionPropertyInfo)(unsafe.Pointer(ret))
}

func (me *callbacksImpl) GetClassCreationInfoGetPropertyListFuncCallback() ClassGetPropertyList {
  return transformPointer[ClassGetPropertyList](C.cgo_ClassCreationInfoGetPropertyListFunc)
}

func (me *callbacksImpl) SetClassCreationInfoGetRidFuncHandler(fn func(pInstance ClassInstancePtr, ) uint64) {
  me.fnClassCreationInfoGetRidFunc = fn
}

//export cgo_ClassCreationInfoGetRidFunc
func cgo_ClassCreationInfoGetRidFunc(pInstance C.GDExtensionClassInstancePtr, ) C.uint64_t {
  ret := Callbacks.fnClassCreationInfoGetRidFunc(ClassInstancePtr(pInstance), )
  return C.uint64_t(ret)
}

func (me *callbacksImpl) GetClassCreationInfoGetRidFuncCallback() ClassGetRID {
  return transformPointer[ClassGetRID](C.cgo_ClassCreationInfoGetRidFunc)
}

func (me *callbacksImpl) SetClassCreationInfoGetVirtualFuncHandler(fn func(pUserdata unsafe.Pointer, pName ConstStringNamePtr, ) ClassCallVirtual) {
  me.fnClassCreationInfoGetVirtualFunc = fn
}

//export cgo_ClassCreationInfoGetVirtualFunc
func cgo_ClassCreationInfoGetVirtualFunc(pUserdata unsafe.Pointer, pName C.GDExtensionConstStringNamePtr, ) C.GDExtensionClassCallVirtual {
  ret := Callbacks.fnClassCreationInfoGetVirtualFunc(unsafe.Pointer(pUserdata), ConstStringNamePtr(pName), )
  return C.GDExtensionClassCallVirtual(ret)
}

func (me *callbacksImpl) GetClassCreationInfoGetVirtualFuncCallback() ClassGetVirtual {
  return transformPointer[ClassGetVirtual](C.cgo_ClassCreationInfoGetVirtualFunc)
}

func (me *callbacksImpl) SetClassCreationInfoNotificationFuncHandler(fn func(pInstance ClassInstancePtr, pWhat int, ) ) {
  me.fnClassCreationInfoNotificationFunc = fn
}

//export cgo_ClassCreationInfoNotificationFunc
func cgo_ClassCreationInfoNotificationFunc(pInstance C.GDExtensionClassInstancePtr, pWhat C.int32_t, )  {
  Callbacks.fnClassCreationInfoNotificationFunc(ClassInstancePtr(pInstance), int(pWhat), )
}

func (me *callbacksImpl) GetClassCreationInfoNotificationFuncCallback() ClassNotification {
  return transformPointer[ClassNotification](C.cgo_ClassCreationInfoNotificationFunc)
}

func (me *callbacksImpl) SetClassCreationInfoPropertyCanRevertFuncHandler(fn func(pInstance ClassInstancePtr, pName ConstStringNamePtr, ) Bool) {
  me.fnClassCreationInfoPropertyCanRevertFunc = fn
}

//export cgo_ClassCreationInfoPropertyCanRevertFunc
func cgo_ClassCreationInfoPropertyCanRevertFunc(pInstance C.GDExtensionClassInstancePtr, pName C.GDExtensionConstStringNamePtr, ) C.GDExtensionBool {
  ret := Callbacks.fnClassCreationInfoPropertyCanRevertFunc(ClassInstancePtr(pInstance), ConstStringNamePtr(pName), )
  return C.GDExtensionBool(ret)
}

func (me *callbacksImpl) GetClassCreationInfoPropertyCanRevertFuncCallback() ClassPropertyCanRevert {
  return transformPointer[ClassPropertyCanRevert](C.cgo_ClassCreationInfoPropertyCanRevertFunc)
}

func (me *callbacksImpl) SetClassCreationInfoPropertyGetRevertFuncHandler(fn func(pInstance ClassInstancePtr, pName ConstStringNamePtr, rRet VariantPtr, ) Bool) {
  me.fnClassCreationInfoPropertyGetRevertFunc = fn
}

//export cgo_ClassCreationInfoPropertyGetRevertFunc
func cgo_ClassCreationInfoPropertyGetRevertFunc(pInstance C.GDExtensionClassInstancePtr, pName C.GDExtensionConstStringNamePtr, rRet C.GDExtensionVariantPtr, ) C.GDExtensionBool {
  ret := Callbacks.fnClassCreationInfoPropertyGetRevertFunc(ClassInstancePtr(pInstance), ConstStringNamePtr(pName), VariantPtr(rRet), )
  return C.GDExtensionBool(ret)
}

func (me *callbacksImpl) GetClassCreationInfoPropertyGetRevertFuncCallback() ClassPropertyGetRevert {
  return transformPointer[ClassPropertyGetRevert](C.cgo_ClassCreationInfoPropertyGetRevertFunc)
}

func (me *callbacksImpl) SetClassCreationInfoReferenceFuncHandler(fn func(pInstance ClassInstancePtr, ) ) {
  me.fnClassCreationInfoReferenceFunc = fn
}

//export cgo_ClassCreationInfoReferenceFunc
func cgo_ClassCreationInfoReferenceFunc(pInstance C.GDExtensionClassInstancePtr, )  {
  Callbacks.fnClassCreationInfoReferenceFunc(ClassInstancePtr(pInstance), )
}

func (me *callbacksImpl) GetClassCreationInfoReferenceFuncCallback() ClassReference {
  return transformPointer[ClassReference](C.cgo_ClassCreationInfoReferenceFunc)
}

func (me *callbacksImpl) SetClassCreationInfoSetFuncHandler(fn func(pInstance ClassInstancePtr, pName ConstStringNamePtr, pValue ConstVariantPtr, ) Bool) {
  me.fnClassCreationInfoSetFunc = fn
}

//export cgo_ClassCreationInfoSetFunc
func cgo_ClassCreationInfoSetFunc(pInstance C.GDExtensionClassInstancePtr, pName C.GDExtensionConstStringNamePtr, pValue C.GDExtensionConstVariantPtr, ) C.GDExtensionBool {
  ret := Callbacks.fnClassCreationInfoSetFunc(ClassInstancePtr(pInstance), ConstStringNamePtr(pName), ConstVariantPtr(pValue), )
  return C.GDExtensionBool(ret)
}

func (me *callbacksImpl) GetClassCreationInfoSetFuncCallback() ClassSet {
  return transformPointer[ClassSet](C.cgo_ClassCreationInfoSetFunc)
}

func (me *callbacksImpl) SetClassCreationInfoToStringFuncHandler(fn func(pInstance ClassInstancePtr, rIsValid *uint8, pOut StringPtr, ) ) {
  me.fnClassCreationInfoToStringFunc = fn
}

//export cgo_ClassCreationInfoToStringFunc
func cgo_ClassCreationInfoToStringFunc(pInstance C.GDExtensionClassInstancePtr, rIsValid *C.uint8_t, pOut C.GDExtensionStringPtr, )  {
  Callbacks.fnClassCreationInfoToStringFunc(ClassInstancePtr(pInstance), *(**uint8)(unsafe.Pointer(&rIsValid)), StringPtr(pOut), )
}

func (me *callbacksImpl) GetClassCreationInfoToStringFuncCallback() ClassToString {
  return transformPointer[ClassToString](C.cgo_ClassCreationInfoToStringFunc)
}

func (me *callbacksImpl) SetClassCreationInfoUnreferenceFuncHandler(fn func(pInstance ClassInstancePtr, ) ) {
  me.fnClassCreationInfoUnreferenceFunc = fn
}

//export cgo_ClassCreationInfoUnreferenceFunc
func cgo_ClassCreationInfoUnreferenceFunc(pInstance C.GDExtensionClassInstancePtr, )  {
  Callbacks.fnClassCreationInfoUnreferenceFunc(ClassInstancePtr(pInstance), )
}

func (me *callbacksImpl) GetClassCreationInfoUnreferenceFuncCallback() ClassUnreference {
  return transformPointer[ClassUnreference](C.cgo_ClassCreationInfoUnreferenceFunc)
}

func (me *callbacksImpl) SetClassMethodInfoCallFuncHandler(fn func(methodUserdata unsafe.Pointer, pInstance ClassInstancePtr, pArgs *ConstVariantPtr, pArgumentCount Int, rReturn VariantPtr, rError *CallError, ) ) {
  me.fnClassMethodInfoCallFunc = fn
}

//export cgo_ClassMethodInfoCallFunc
func cgo_ClassMethodInfoCallFunc(methodUserdata unsafe.Pointer, pInstance C.GDExtensionClassInstancePtr, pArgs *C.GDExtensionConstVariantPtr, pArgumentCount C.GDExtensionInt, rReturn C.GDExtensionVariantPtr, rError *C.GDExtensionCallError, )  {
  Callbacks.fnClassMethodInfoCallFunc(unsafe.Pointer(methodUserdata), ClassInstancePtr(pInstance), *(**ConstVariantPtr)(unsafe.Pointer(&pArgs)), Int(pArgumentCount), VariantPtr(rReturn), (*CallError)(unsafe.Pointer(rError)), )
}

func (me *callbacksImpl) GetClassMethodInfoCallFuncCallback() ClassMethodCall {
  return transformPointer[ClassMethodCall](C.cgo_ClassMethodInfoCallFunc)
}

func (me *callbacksImpl) SetClassMethodInfoPtrcallFuncHandler(fn func(methodUserdata unsafe.Pointer, pInstance ClassInstancePtr, pArgs *ConstTypePtr, rRet TypePtr, ) ) {
  me.fnClassMethodInfoPtrcallFunc = fn
}

//export cgo_ClassMethodInfoPtrcallFunc
func cgo_ClassMethodInfoPtrcallFunc(methodUserdata unsafe.Pointer, pInstance C.GDExtensionClassInstancePtr, pArgs *C.GDExtensionConstTypePtr, rRet C.GDExtensionTypePtr, )  {
  Callbacks.fnClassMethodInfoPtrcallFunc(unsafe.Pointer(methodUserdata), ClassInstancePtr(pInstance), *(**ConstTypePtr)(unsafe.Pointer(&pArgs)), TypePtr(rRet), )
}

func (me *callbacksImpl) GetClassMethodInfoPtrcallFuncCallback() ClassMethodPtrCall {
  return transformPointer[ClassMethodPtrCall](C.cgo_ClassMethodInfoPtrcallFunc)
}

func (me *callbacksImpl) SetInitializationDeinitializeHandler(fn func(userdata unsafe.Pointer, pLevel InitializationLevel, ) ) {
  me.fnInitializationDeinitialize = fn
}

//export cgo_InitializationDeinitialize
func cgo_InitializationDeinitialize(userdata unsafe.Pointer, pLevel C.GDExtensionInitializationLevel, )  {
  Callbacks.fnInitializationDeinitialize(unsafe.Pointer(userdata), InitializationLevel(pLevel), )
}

func (me *callbacksImpl) GetInitializationDeinitializeCallback() InitializationDeinitializeFn {
  return transformPointer[InitializationDeinitializeFn](C.cgo_InitializationDeinitialize)
}

func (me *callbacksImpl) SetInitializationInitializeHandler(fn func(userdata unsafe.Pointer, pLevel InitializationLevel, ) ) {
  me.fnInitializationInitialize = fn
}

//export cgo_InitializationInitialize
func cgo_InitializationInitialize(userdata unsafe.Pointer, pLevel C.GDExtensionInitializationLevel, )  {
  Callbacks.fnInitializationInitialize(unsafe.Pointer(userdata), InitializationLevel(pLevel), )
}

func (me *callbacksImpl) GetInitializationInitializeCallback() InitializationInitializeFn {
  return transformPointer[InitializationInitializeFn](C.cgo_InitializationInitialize)
}

func (me *callbacksImpl) SetInstanceBindingCallbacksCreateCallbackHandler(fn func(pToken unsafe.Pointer, pInstance unsafe.Pointer, ) unsafe.Pointer) {
  me.fnInstanceBindingCallbacksCreateCallback = fn
}

//export cgo_InstanceBindingCallbacksCreateCallback
func cgo_InstanceBindingCallbacksCreateCallback(pToken unsafe.Pointer, pInstance unsafe.Pointer, ) unsafe.Pointer {
  ret := Callbacks.fnInstanceBindingCallbacksCreateCallback(unsafe.Pointer(pToken), unsafe.Pointer(pInstance), )
  return ret
}

func (me *callbacksImpl) GetInstanceBindingCallbacksCreateCallbackCallback() InstanceBindingCreateCallback {
  return transformPointer[InstanceBindingCreateCallback](C.cgo_InstanceBindingCallbacksCreateCallback)
}

func (me *callbacksImpl) SetInstanceBindingCallbacksFreeCallbackHandler(fn func(pToken unsafe.Pointer, pInstance unsafe.Pointer, pBinding unsafe.Pointer, ) ) {
  me.fnInstanceBindingCallbacksFreeCallback = fn
}

//export cgo_InstanceBindingCallbacksFreeCallback
func cgo_InstanceBindingCallbacksFreeCallback(pToken unsafe.Pointer, pInstance unsafe.Pointer, pBinding unsafe.Pointer, )  {
  Callbacks.fnInstanceBindingCallbacksFreeCallback(unsafe.Pointer(pToken), unsafe.Pointer(pInstance), unsafe.Pointer(pBinding), )
}

func (me *callbacksImpl) GetInstanceBindingCallbacksFreeCallbackCallback() InstanceBindingFreeCallback {
  return transformPointer[InstanceBindingFreeCallback](C.cgo_InstanceBindingCallbacksFreeCallback)
}

func (me *callbacksImpl) SetInstanceBindingCallbacksReferenceCallbackHandler(fn func(pToken unsafe.Pointer, pBinding unsafe.Pointer, pReference Bool, ) Bool) {
  me.fnInstanceBindingCallbacksReferenceCallback = fn
}

//export cgo_InstanceBindingCallbacksReferenceCallback
func cgo_InstanceBindingCallbacksReferenceCallback(pToken unsafe.Pointer, pBinding unsafe.Pointer, pReference C.GDExtensionBool, ) C.GDExtensionBool {
  ret := Callbacks.fnInstanceBindingCallbacksReferenceCallback(unsafe.Pointer(pToken), unsafe.Pointer(pBinding), Bool(pReference), )
  return C.GDExtensionBool(ret)
}

func (me *callbacksImpl) GetInstanceBindingCallbacksReferenceCallbackCallback() InstanceBindingReferenceCallback {
  return transformPointer[InstanceBindingReferenceCallback](C.cgo_InstanceBindingCallbacksReferenceCallback)
}

func (me *callbacksImpl) SetScriptInstanceInfoCallFuncHandler(fn func(pSelf ScriptInstanceDataPtr, pMethod ConstStringNamePtr, pArgs *ConstVariantPtr, pArgumentCount Int, rReturn VariantPtr, rError *CallError, ) ) {
  me.fnScriptInstanceInfoCallFunc = fn
}

//export cgo_ScriptInstanceInfoCallFunc
func cgo_ScriptInstanceInfoCallFunc(pSelf C.GDExtensionScriptInstanceDataPtr, pMethod C.GDExtensionConstStringNamePtr, pArgs *C.GDExtensionConstVariantPtr, pArgumentCount C.GDExtensionInt, rReturn C.GDExtensionVariantPtr, rError *C.GDExtensionCallError, )  {
  Callbacks.fnScriptInstanceInfoCallFunc(ScriptInstanceDataPtr(pSelf), ConstStringNamePtr(pMethod), *(**ConstVariantPtr)(unsafe.Pointer(&pArgs)), Int(pArgumentCount), VariantPtr(rReturn), (*CallError)(unsafe.Pointer(rError)), )
}

func (me *callbacksImpl) GetScriptInstanceInfoCallFuncCallback() ScriptInstanceCall {
  return transformPointer[ScriptInstanceCall](C.cgo_ScriptInstanceInfoCallFunc)
}

func (me *callbacksImpl) SetScriptInstanceInfoFreeFuncHandler(fn func(pInstance ScriptInstanceDataPtr, ) ) {
  me.fnScriptInstanceInfoFreeFunc = fn
}

//export cgo_ScriptInstanceInfoFreeFunc
func cgo_ScriptInstanceInfoFreeFunc(pInstance C.GDExtensionScriptInstanceDataPtr, )  {
  Callbacks.fnScriptInstanceInfoFreeFunc(ScriptInstanceDataPtr(pInstance), )
}

func (me *callbacksImpl) GetScriptInstanceInfoFreeFuncCallback() ScriptInstanceFree {
  return transformPointer[ScriptInstanceFree](C.cgo_ScriptInstanceInfoFreeFunc)
}

func (me *callbacksImpl) SetScriptInstanceInfoFreeMethodListFuncHandler(fn func(pInstance ScriptInstanceDataPtr, pList *MethodInfo, ) ) {
  me.fnScriptInstanceInfoFreeMethodListFunc = fn
}

//export cgo_ScriptInstanceInfoFreeMethodListFunc
func cgo_ScriptInstanceInfoFreeMethodListFunc(pInstance C.GDExtensionScriptInstanceDataPtr, pList *C.GDExtensionMethodInfo, )  {
  Callbacks.fnScriptInstanceInfoFreeMethodListFunc(ScriptInstanceDataPtr(pInstance), (*MethodInfo)(unsafe.Pointer(pList)), )
}

func (me *callbacksImpl) GetScriptInstanceInfoFreeMethodListFuncCallback() ScriptInstanceFreeMethodList {
  return transformPointer[ScriptInstanceFreeMethodList](C.cgo_ScriptInstanceInfoFreeMethodListFunc)
}

func (me *callbacksImpl) SetScriptInstanceInfoFreePropertyListFuncHandler(fn func(pInstance ScriptInstanceDataPtr, pList *PropertyInfo, ) ) {
  me.fnScriptInstanceInfoFreePropertyListFunc = fn
}

//export cgo_ScriptInstanceInfoFreePropertyListFunc
func cgo_ScriptInstanceInfoFreePropertyListFunc(pInstance C.GDExtensionScriptInstanceDataPtr, pList *C.GDExtensionPropertyInfo, )  {
  Callbacks.fnScriptInstanceInfoFreePropertyListFunc(ScriptInstanceDataPtr(pInstance), (*PropertyInfo)(unsafe.Pointer(pList)), )
}

func (me *callbacksImpl) GetScriptInstanceInfoFreePropertyListFuncCallback() ScriptInstanceFreePropertyList {
  return transformPointer[ScriptInstanceFreePropertyList](C.cgo_ScriptInstanceInfoFreePropertyListFunc)
}

func (me *callbacksImpl) SetScriptInstanceInfoGetFallbackFuncHandler(fn func(pInstance ScriptInstanceDataPtr, pName ConstStringNamePtr, rRet VariantPtr, ) Bool) {
  me.fnScriptInstanceInfoGetFallbackFunc = fn
}

//export cgo_ScriptInstanceInfoGetFallbackFunc
func cgo_ScriptInstanceInfoGetFallbackFunc(pInstance C.GDExtensionScriptInstanceDataPtr, pName C.GDExtensionConstStringNamePtr, rRet C.GDExtensionVariantPtr, ) C.GDExtensionBool {
  ret := Callbacks.fnScriptInstanceInfoGetFallbackFunc(ScriptInstanceDataPtr(pInstance), ConstStringNamePtr(pName), VariantPtr(rRet), )
  return C.GDExtensionBool(ret)
}

func (me *callbacksImpl) GetScriptInstanceInfoGetFallbackFuncCallback() ScriptInstanceGet {
  return transformPointer[ScriptInstanceGet](C.cgo_ScriptInstanceInfoGetFallbackFunc)
}

func (me *callbacksImpl) SetScriptInstanceInfoGetFuncHandler(fn func(pInstance ScriptInstanceDataPtr, pName ConstStringNamePtr, rRet VariantPtr, ) Bool) {
  me.fnScriptInstanceInfoGetFunc = fn
}

//export cgo_ScriptInstanceInfoGetFunc
func cgo_ScriptInstanceInfoGetFunc(pInstance C.GDExtensionScriptInstanceDataPtr, pName C.GDExtensionConstStringNamePtr, rRet C.GDExtensionVariantPtr, ) C.GDExtensionBool {
  ret := Callbacks.fnScriptInstanceInfoGetFunc(ScriptInstanceDataPtr(pInstance), ConstStringNamePtr(pName), VariantPtr(rRet), )
  return C.GDExtensionBool(ret)
}

func (me *callbacksImpl) GetScriptInstanceInfoGetFuncCallback() ScriptInstanceGet {
  return transformPointer[ScriptInstanceGet](C.cgo_ScriptInstanceInfoGetFunc)
}

func (me *callbacksImpl) SetScriptInstanceInfoGetLanguageFuncHandler(fn func(pInstance ScriptInstanceDataPtr, ) ScriptLanguagePtr) {
  me.fnScriptInstanceInfoGetLanguageFunc = fn
}

//export cgo_ScriptInstanceInfoGetLanguageFunc
func cgo_ScriptInstanceInfoGetLanguageFunc(pInstance C.GDExtensionScriptInstanceDataPtr, ) C.GDExtensionScriptLanguagePtr {
  ret := Callbacks.fnScriptInstanceInfoGetLanguageFunc(ScriptInstanceDataPtr(pInstance), )
  return C.GDExtensionScriptLanguagePtr(ret)
}

func (me *callbacksImpl) GetScriptInstanceInfoGetLanguageFuncCallback() ScriptInstanceGetLanguage {
  return transformPointer[ScriptInstanceGetLanguage](C.cgo_ScriptInstanceInfoGetLanguageFunc)
}

func (me *callbacksImpl) SetScriptInstanceInfoGetMethodListFuncHandler(fn func(pInstance ScriptInstanceDataPtr, rCount *uint, ) *MethodInfo) {
  me.fnScriptInstanceInfoGetMethodListFunc = fn
}

//export cgo_ScriptInstanceInfoGetMethodListFunc
func cgo_ScriptInstanceInfoGetMethodListFunc(pInstance C.GDExtensionScriptInstanceDataPtr, rCount *C.unsigned, ) *C.GDExtensionMethodInfo {
  ret := Callbacks.fnScriptInstanceInfoGetMethodListFunc(ScriptInstanceDataPtr(pInstance), *(**uint)(unsafe.Pointer(&rCount)), )
  return (*C.GDExtensionMethodInfo)(unsafe.Pointer(ret))
}

func (me *callbacksImpl) GetScriptInstanceInfoGetMethodListFuncCallback() ScriptInstanceGetMethodList {
  return transformPointer[ScriptInstanceGetMethodList](C.cgo_ScriptInstanceInfoGetMethodListFunc)
}

func (me *callbacksImpl) SetScriptInstanceInfoGetOwnerFuncHandler(fn func(pInstance ScriptInstanceDataPtr, ) ObjectPtr) {
  me.fnScriptInstanceInfoGetOwnerFunc = fn
}

//export cgo_ScriptInstanceInfoGetOwnerFunc
func cgo_ScriptInstanceInfoGetOwnerFunc(pInstance C.GDExtensionScriptInstanceDataPtr, ) C.GDExtensionObjectPtr {
  ret := Callbacks.fnScriptInstanceInfoGetOwnerFunc(ScriptInstanceDataPtr(pInstance), )
  return C.GDExtensionObjectPtr(ret)
}

func (me *callbacksImpl) GetScriptInstanceInfoGetOwnerFuncCallback() ScriptInstanceGetOwner {
  return transformPointer[ScriptInstanceGetOwner](C.cgo_ScriptInstanceInfoGetOwnerFunc)
}

func (me *callbacksImpl) SetScriptInstanceInfoGetPropertyListFuncHandler(fn func(pInstance ScriptInstanceDataPtr, rCount *uint, ) *PropertyInfo) {
  me.fnScriptInstanceInfoGetPropertyListFunc = fn
}

//export cgo_ScriptInstanceInfoGetPropertyListFunc
func cgo_ScriptInstanceInfoGetPropertyListFunc(pInstance C.GDExtensionScriptInstanceDataPtr, rCount *C.unsigned, ) *C.GDExtensionPropertyInfo {
  ret := Callbacks.fnScriptInstanceInfoGetPropertyListFunc(ScriptInstanceDataPtr(pInstance), *(**uint)(unsafe.Pointer(&rCount)), )
  return (*C.GDExtensionPropertyInfo)(unsafe.Pointer(ret))
}

func (me *callbacksImpl) GetScriptInstanceInfoGetPropertyListFuncCallback() ScriptInstanceGetPropertyList {
  return transformPointer[ScriptInstanceGetPropertyList](C.cgo_ScriptInstanceInfoGetPropertyListFunc)
}

func (me *callbacksImpl) SetScriptInstanceInfoGetPropertyStateFuncHandler(fn func(pInstance ScriptInstanceDataPtr, pAddFunc ScriptInstancePropertyStateAdd, pUserdata unsafe.Pointer, ) ) {
  me.fnScriptInstanceInfoGetPropertyStateFunc = fn
}

//export cgo_ScriptInstanceInfoGetPropertyStateFunc
func cgo_ScriptInstanceInfoGetPropertyStateFunc(pInstance C.GDExtensionScriptInstanceDataPtr, pAddFunc C.GDExtensionScriptInstancePropertyStateAdd, pUserdata unsafe.Pointer, )  {
  Callbacks.fnScriptInstanceInfoGetPropertyStateFunc(ScriptInstanceDataPtr(pInstance), ScriptInstancePropertyStateAdd(pAddFunc), unsafe.Pointer(pUserdata), )
}

func (me *callbacksImpl) GetScriptInstanceInfoGetPropertyStateFuncCallback() ScriptInstanceGetPropertyState {
  return transformPointer[ScriptInstanceGetPropertyState](C.cgo_ScriptInstanceInfoGetPropertyStateFunc)
}

func (me *callbacksImpl) SetScriptInstanceInfoGetPropertyTypeFuncHandler(fn func(pInstance ScriptInstanceDataPtr, pName ConstStringNamePtr, rIsValid *uint8, ) VariantType) {
  me.fnScriptInstanceInfoGetPropertyTypeFunc = fn
}

//export cgo_ScriptInstanceInfoGetPropertyTypeFunc
func cgo_ScriptInstanceInfoGetPropertyTypeFunc(pInstance C.GDExtensionScriptInstanceDataPtr, pName C.GDExtensionConstStringNamePtr, rIsValid *C.uint8_t, ) C.GDExtensionVariantType {
  ret := Callbacks.fnScriptInstanceInfoGetPropertyTypeFunc(ScriptInstanceDataPtr(pInstance), ConstStringNamePtr(pName), *(**uint8)(unsafe.Pointer(&rIsValid)), )
  return C.GDExtensionVariantType(ret)
}

func (me *callbacksImpl) GetScriptInstanceInfoGetPropertyTypeFuncCallback() ScriptInstanceGetPropertyType {
  return transformPointer[ScriptInstanceGetPropertyType](C.cgo_ScriptInstanceInfoGetPropertyTypeFunc)
}

func (me *callbacksImpl) SetScriptInstanceInfoGetScriptFuncHandler(fn func(pInstance ScriptInstanceDataPtr, ) ObjectPtr) {
  me.fnScriptInstanceInfoGetScriptFunc = fn
}

//export cgo_ScriptInstanceInfoGetScriptFunc
func cgo_ScriptInstanceInfoGetScriptFunc(pInstance C.GDExtensionScriptInstanceDataPtr, ) C.GDExtensionObjectPtr {
  ret := Callbacks.fnScriptInstanceInfoGetScriptFunc(ScriptInstanceDataPtr(pInstance), )
  return C.GDExtensionObjectPtr(ret)
}

func (me *callbacksImpl) GetScriptInstanceInfoGetScriptFuncCallback() ScriptInstanceGetScript {
  return transformPointer[ScriptInstanceGetScript](C.cgo_ScriptInstanceInfoGetScriptFunc)
}

func (me *callbacksImpl) SetScriptInstanceInfoHasMethodFuncHandler(fn func(pInstance ScriptInstanceDataPtr, pName ConstStringNamePtr, ) Bool) {
  me.fnScriptInstanceInfoHasMethodFunc = fn
}

//export cgo_ScriptInstanceInfoHasMethodFunc
func cgo_ScriptInstanceInfoHasMethodFunc(pInstance C.GDExtensionScriptInstanceDataPtr, pName C.GDExtensionConstStringNamePtr, ) C.GDExtensionBool {
  ret := Callbacks.fnScriptInstanceInfoHasMethodFunc(ScriptInstanceDataPtr(pInstance), ConstStringNamePtr(pName), )
  return C.GDExtensionBool(ret)
}

func (me *callbacksImpl) GetScriptInstanceInfoHasMethodFuncCallback() ScriptInstanceHasMethod {
  return transformPointer[ScriptInstanceHasMethod](C.cgo_ScriptInstanceInfoHasMethodFunc)
}

func (me *callbacksImpl) SetScriptInstanceInfoIsPlaceholderFuncHandler(fn func(pInstance ScriptInstanceDataPtr, ) Bool) {
  me.fnScriptInstanceInfoIsPlaceholderFunc = fn
}

//export cgo_ScriptInstanceInfoIsPlaceholderFunc
func cgo_ScriptInstanceInfoIsPlaceholderFunc(pInstance C.GDExtensionScriptInstanceDataPtr, ) C.GDExtensionBool {
  ret := Callbacks.fnScriptInstanceInfoIsPlaceholderFunc(ScriptInstanceDataPtr(pInstance), )
  return C.GDExtensionBool(ret)
}

func (me *callbacksImpl) GetScriptInstanceInfoIsPlaceholderFuncCallback() ScriptInstanceIsPlaceholder {
  return transformPointer[ScriptInstanceIsPlaceholder](C.cgo_ScriptInstanceInfoIsPlaceholderFunc)
}

func (me *callbacksImpl) SetScriptInstanceInfoNotificationFuncHandler(fn func(pInstance ScriptInstanceDataPtr, pWhat int, ) ) {
  me.fnScriptInstanceInfoNotificationFunc = fn
}

//export cgo_ScriptInstanceInfoNotificationFunc
func cgo_ScriptInstanceInfoNotificationFunc(pInstance C.GDExtensionScriptInstanceDataPtr, pWhat C.int32_t, )  {
  Callbacks.fnScriptInstanceInfoNotificationFunc(ScriptInstanceDataPtr(pInstance), int(pWhat), )
}

func (me *callbacksImpl) GetScriptInstanceInfoNotificationFuncCallback() ScriptInstanceNotification {
  return transformPointer[ScriptInstanceNotification](C.cgo_ScriptInstanceInfoNotificationFunc)
}

func (me *callbacksImpl) SetScriptInstanceInfoPropertyCanRevertFuncHandler(fn func(pInstance ScriptInstanceDataPtr, pName ConstStringNamePtr, ) Bool) {
  me.fnScriptInstanceInfoPropertyCanRevertFunc = fn
}

//export cgo_ScriptInstanceInfoPropertyCanRevertFunc
func cgo_ScriptInstanceInfoPropertyCanRevertFunc(pInstance C.GDExtensionScriptInstanceDataPtr, pName C.GDExtensionConstStringNamePtr, ) C.GDExtensionBool {
  ret := Callbacks.fnScriptInstanceInfoPropertyCanRevertFunc(ScriptInstanceDataPtr(pInstance), ConstStringNamePtr(pName), )
  return C.GDExtensionBool(ret)
}

func (me *callbacksImpl) GetScriptInstanceInfoPropertyCanRevertFuncCallback() ScriptInstancePropertyCanRevert {
  return transformPointer[ScriptInstancePropertyCanRevert](C.cgo_ScriptInstanceInfoPropertyCanRevertFunc)
}

func (me *callbacksImpl) SetScriptInstanceInfoPropertyGetRevertFuncHandler(fn func(pInstance ScriptInstanceDataPtr, pName ConstStringNamePtr, rRet VariantPtr, ) Bool) {
  me.fnScriptInstanceInfoPropertyGetRevertFunc = fn
}

//export cgo_ScriptInstanceInfoPropertyGetRevertFunc
func cgo_ScriptInstanceInfoPropertyGetRevertFunc(pInstance C.GDExtensionScriptInstanceDataPtr, pName C.GDExtensionConstStringNamePtr, rRet C.GDExtensionVariantPtr, ) C.GDExtensionBool {
  ret := Callbacks.fnScriptInstanceInfoPropertyGetRevertFunc(ScriptInstanceDataPtr(pInstance), ConstStringNamePtr(pName), VariantPtr(rRet), )
  return C.GDExtensionBool(ret)
}

func (me *callbacksImpl) GetScriptInstanceInfoPropertyGetRevertFuncCallback() ScriptInstancePropertyGetRevert {
  return transformPointer[ScriptInstancePropertyGetRevert](C.cgo_ScriptInstanceInfoPropertyGetRevertFunc)
}

func (me *callbacksImpl) SetScriptInstanceInfoRefcountDecrementedFuncHandler(fn func(pInstance ScriptInstanceDataPtr, ) Bool) {
  me.fnScriptInstanceInfoRefcountDecrementedFunc = fn
}

//export cgo_ScriptInstanceInfoRefcountDecrementedFunc
func cgo_ScriptInstanceInfoRefcountDecrementedFunc(pInstance C.GDExtensionScriptInstanceDataPtr, ) C.GDExtensionBool {
  ret := Callbacks.fnScriptInstanceInfoRefcountDecrementedFunc(ScriptInstanceDataPtr(pInstance), )
  return C.GDExtensionBool(ret)
}

func (me *callbacksImpl) GetScriptInstanceInfoRefcountDecrementedFuncCallback() ScriptInstanceRefCountDecremented {
  return transformPointer[ScriptInstanceRefCountDecremented](C.cgo_ScriptInstanceInfoRefcountDecrementedFunc)
}

func (me *callbacksImpl) SetScriptInstanceInfoRefcountIncrementedFuncHandler(fn func(pInstance ScriptInstanceDataPtr, ) ) {
  me.fnScriptInstanceInfoRefcountIncrementedFunc = fn
}

//export cgo_ScriptInstanceInfoRefcountIncrementedFunc
func cgo_ScriptInstanceInfoRefcountIncrementedFunc(pInstance C.GDExtensionScriptInstanceDataPtr, )  {
  Callbacks.fnScriptInstanceInfoRefcountIncrementedFunc(ScriptInstanceDataPtr(pInstance), )
}

func (me *callbacksImpl) GetScriptInstanceInfoRefcountIncrementedFuncCallback() ScriptInstanceRefCountIncremented {
  return transformPointer[ScriptInstanceRefCountIncremented](C.cgo_ScriptInstanceInfoRefcountIncrementedFunc)
}

func (me *callbacksImpl) SetScriptInstanceInfoSetFallbackFuncHandler(fn func(pInstance ScriptInstanceDataPtr, pName ConstStringNamePtr, pValue ConstVariantPtr, ) Bool) {
  me.fnScriptInstanceInfoSetFallbackFunc = fn
}

//export cgo_ScriptInstanceInfoSetFallbackFunc
func cgo_ScriptInstanceInfoSetFallbackFunc(pInstance C.GDExtensionScriptInstanceDataPtr, pName C.GDExtensionConstStringNamePtr, pValue C.GDExtensionConstVariantPtr, ) C.GDExtensionBool {
  ret := Callbacks.fnScriptInstanceInfoSetFallbackFunc(ScriptInstanceDataPtr(pInstance), ConstStringNamePtr(pName), ConstVariantPtr(pValue), )
  return C.GDExtensionBool(ret)
}

func (me *callbacksImpl) GetScriptInstanceInfoSetFallbackFuncCallback() ScriptInstanceSet {
  return transformPointer[ScriptInstanceSet](C.cgo_ScriptInstanceInfoSetFallbackFunc)
}

func (me *callbacksImpl) SetScriptInstanceInfoSetFuncHandler(fn func(pInstance ScriptInstanceDataPtr, pName ConstStringNamePtr, pValue ConstVariantPtr, ) Bool) {
  me.fnScriptInstanceInfoSetFunc = fn
}

//export cgo_ScriptInstanceInfoSetFunc
func cgo_ScriptInstanceInfoSetFunc(pInstance C.GDExtensionScriptInstanceDataPtr, pName C.GDExtensionConstStringNamePtr, pValue C.GDExtensionConstVariantPtr, ) C.GDExtensionBool {
  ret := Callbacks.fnScriptInstanceInfoSetFunc(ScriptInstanceDataPtr(pInstance), ConstStringNamePtr(pName), ConstVariantPtr(pValue), )
  return C.GDExtensionBool(ret)
}

func (me *callbacksImpl) GetScriptInstanceInfoSetFuncCallback() ScriptInstanceSet {
  return transformPointer[ScriptInstanceSet](C.cgo_ScriptInstanceInfoSetFunc)
}

func (me *callbacksImpl) SetScriptInstanceInfoToStringFuncHandler(fn func(pInstance ScriptInstanceDataPtr, rIsValid *uint8, rOut StringPtr, ) ) {
  me.fnScriptInstanceInfoToStringFunc = fn
}

//export cgo_ScriptInstanceInfoToStringFunc
func cgo_ScriptInstanceInfoToStringFunc(pInstance C.GDExtensionScriptInstanceDataPtr, rIsValid *C.uint8_t, rOut C.GDExtensionStringPtr, )  {
  Callbacks.fnScriptInstanceInfoToStringFunc(ScriptInstanceDataPtr(pInstance), *(**uint8)(unsafe.Pointer(&rIsValid)), StringPtr(rOut), )
}

func (me *callbacksImpl) GetScriptInstanceInfoToStringFuncCallback() ScriptInstanceToString {
  return transformPointer[ScriptInstanceToString](C.cgo_ScriptInstanceInfoToStringFunc)
}

