package gdextension

/*
#include <stdlib.h>
#include <stdint.h>

typedef struct {
    uint8_t godot_data_dont_touch_this[sizeof(void *)];
} String;

typedef struct {
    uint8_t godot_data_dont_touch_this[sizeof(void *)];
} StringName;

typedef struct {
    uint8_t godot_data_dont_touch_this[24];
} Variant;

// declared in C
void* go_dot_gdextension_get_proc_address(void *(*p_get_proc_address)(const char *name), const char *name);
void go_dot_gdextension_classdb_register_extension_class(void (*fn)(void *lib, const void *name, const void *parent_name, const void *def), void *lib, const void *name, const void *parent_name, const void *def);
void go_dot_gdextension_classdb_unregister_extension_class(void (*fn)(void *lib, const void *name), void *lib, const void *name);
void go_dot_gdextension_print_error(void (*fn)(const char *p_description, const char *p_function, const char *p_file, int32_t p_line, char p_editor_notify), const char *p_description, const char *p_function, const char *p_file, int32_t p_line, char p_editor_notify);
void go_dot_gdextension_print_error_with_message(void (*fn)(const char *p_description, const char *p_message, const char *p_function, const char *p_file, int32_t p_line, char p_editor_notify), const char *p_description, const char *p_message, const char *p_function, const char *p_file, int32_t p_line, char p_editor_notify);
void go_dot_gdextension_print_warning(void (*fn)(const char *p_description, const char *p_function, const char *p_file, int32_t p_line, char p_editor_notify), const char *p_description, const char *p_function, const char *p_file, int32_t p_line, char p_editor_notify);
void go_dot_gdextension_print_warning_with_message(void (*fn)(const char *p_description, const char *p_message, const char *p_function, const char *p_file, int32_t p_line, char p_editor_notify), const char *p_description, const char *p_message, const char *p_function, const char *p_file, int32_t p_line, char p_editor_notify);
void* go_dot_gdextension_variant_get_ptr_destructor(void* (*fn)(int p_type), int p_type);
void* go_dot_gdextension_variant_get_ptr_constructor(void* (*fn)(int p_type, int32_t p_constructor), int p_type, int32_t p_constructor);
void* go_dot_gdextension_get_variant_from_type_constructor(void* (*fn)(int p_type), int p_type);
void go_dot_gdextension_string_new_with_utf8_chars(void (*fn)(void *r_dest, const char *p_contents), void *r_dest, const char *p_contents);
void* go_dot_gdextension_variant_get_ptr_utility_function(void* (*fn)(const void *p_function, int p_hash), const void *p_function, int p_hash);
void go_dot_gdextension_variant_destroy(void (*fn)(void *p_self), void *p_self);
void go_dot_gdextension_call_variant_constructor(void (*fn)(void *p_self, const void *p_args, int p_argcount), void *p_self, const void *p_args, int p_argcount);
void go_dot_gdextension_call_variant_type_constructor(void (*fn)(void *p_self, const void *inside), void *p_self, const void *inside);
void go_dot_gdextension_call_variant_destructor(void (*fn)(void *p_self), void *p_self);
void go_dot_gdextension_call_utility_function(void (*fn)(void** ret, const void *p_args, int p_argcount), void** ret, const void *p_args, int p_argcount);
void* go_dot_gdextension_classdb_construct_object(void* (*fn)(const void *p_classname), const void *p_classname);
void go_dot_gdextension_object_set_instance(void (*fn)(void *p_o, const void *p_classname, void *p_instance), void *p_o, const void *p_classname, void *p_instance);
uint64_t go_dot_gdextension_object_get_instance_id(uint64_t (*fn)(void *p_o), void *p_o);

// declared in Go
void *go_dot_gdextension_class_create_instance(void *userdata);
void go_dot_gdextension_class_free_instance(void *userdata, void *instance);
*/
import "C"
import (
	"fmt"
	"log"
	"unsafe"

	"github.com/LouisBrunner/go-dot-extension/pkg/gdc"
)

var (
	trampolineClassCreateInstance = UnsafeConvert[types.ClassCreateInstance](C.go_dot_gdextension_class_create_instance)
	trampolineClassFreeInstance   = UnsafeConvert[types.ClassFreeInstance](C.go_dot_gdextension_class_free_instance)
)

func getProcAddressFor[T any](me *extension, name string) (T, error) {
	cname := cstring(name)
	defer cfree(unsafe.Pointer(cname))
	me.Logf(LogLevelDebug, "getting proc address for %q", name)
	raw := C.go_dot_gdextension_get_proc_address(me.pGetProcAddress, cname)
	me.Logf(LogLevelDebug, "got proc address for %q: %p", name, raw)
	if raw == nil {
		return UnsafeConvert[T](raw), fmt.Errorf("could not find proc address for %s", name)
	}
	return UnsafeConvert[T](raw), nil
}

func (me *extension) callInterfaceClassdbRegisterExtensionClass(lib types.ClassLibraryPtr, name, parentName string, def *types.ClassCreationInfo) error {
	cname, clean, err := me.makeStringName(name)
	if err != nil {
		return err
	}
	defer clean()

	cparentName, clean, err := me.makeStringName(parentName)
	if err != nil {
		return err
	}
	defer clean()

	fnPtr, err := getProcAddressFor[types.InterfaceClassdbRegisterExtensionClass](me, "classdb_register_extension_class")
	if err != nil {
		return err
	}
	C.go_dot_gdextension_classdb_register_extension_class(
		fnPtr,
		unsafe.Pointer(lib),
		unsafe.Pointer(cname),
		unsafe.Pointer(cparentName),
		unsafe.Pointer(def),
	)
	return nil
}

func (me *extension) callInterfaceClassdbUnregisterExtensionClass(lib types.ClassLibraryPtr, name string) error {
	cname, clean, err := me.makeStringName(name)
	if err != nil {
		return err
	}
	defer clean()

	fnPtr, err := getProcAddressFor[types.InterfaceClassdbUnregisterExtensionClass](me, "classdb_unregister_extension_class")
	if err != nil {
		return err
	}
	C.go_dot_gdextension_classdb_unregister_extension_class(
		fnPtr,
		unsafe.Pointer(lib),
		unsafe.Pointer(cname),
	)
	return nil
}

func (me *extension) callInterfaceClassdbConstructObject(parentName string) (types.ObjectPtr, error) {
	cparentName, clean, err := me.makeStringName(parentName)
	if err != nil {
		return nil, err
	}
	defer clean()

	fnPtr, err := getProcAddressFor[types.InterfaceClassdbConstructObject](me, "classdb_construct_object")
	if err != nil {
		return nil, err
	}
	raw := C.go_dot_gdextension_classdb_construct_object(
		fnPtr,
		unsafe.Pointer(cparentName),
	)
	return types.ObjectPtr(raw), nil
}

func (me *extension) callInterfaceObjectSetInstance(object types.ObjectPtr, className string, instance types.ClassInstancePtr) error {
	cname, clean, err := me.makeStringName(className)
	if err != nil {
		return err
	}
	defer clean()

	fnPtr, err := getProcAddressFor[types.InterfaceObjectSetInstance](me, "object_set_instance")
	if err != nil {
		return err
	}
	C.go_dot_gdextension_object_set_instance(
		fnPtr,
		unsafe.Pointer(object),
		unsafe.Pointer(cname),
		unsafe.Pointer(instance),
	)
	return nil
}

func (me *extension) callInterfaceObjectGetInstanceID(object types.ObjectPtr) (types.InstanceID, error) {
	fnPtr, err := getProcAddressFor[types.InterfaceObjectGetInstanceID](me, "object_get_instance_id")
	if err != nil {
		return 0, err
	}
	raw := C.go_dot_gdextension_object_get_instance_id(
		fnPtr,
		unsafe.Pointer(object),
	)
	return types.InstanceID(raw), nil
}

func (me *extension) callInterfacePrintError(description, function, file string, line int32, notifyEditor bool) error {
	cdescription := cstring(description)
	defer cfree(unsafe.Pointer(cdescription))

	cfunction := cstring(function)
	defer cfree(unsafe.Pointer(cfunction))

	cfile := cstring(file)
	defer cfree(unsafe.Pointer(cfile))

	fnPtr, err := getProcAddressFor[types.InterfacePrintError](me, "print_error")
	if err != nil {
		return err
	}
	C.go_dot_gdextension_print_error(
		fnPtr,
		cdescription,
		cfunction,
		cfile,
		C.int32_t(line),
		C.char(boolToByte(notifyEditor)),
	)
	return nil
}

func (me *extension) callInterfacePrintErrorWithMessage(description, message, function, file string, line int32, notifyEditor bool) error {
	cdescription := cstring(description)
	defer cfree(unsafe.Pointer(cdescription))

	cmessage := cstring(message)
	defer cfree(unsafe.Pointer(cmessage))

	cfunction := cstring(function)
	defer cfree(unsafe.Pointer(cfunction))

	cfile := cstring(file)
	defer cfree(unsafe.Pointer(cfile))

	fnPtr, err := getProcAddressFor[types.InterfacePrintError](me, "print_error_with_message")
	if err != nil {
		return err
	}
	C.go_dot_gdextension_print_error_with_message(
		fnPtr,
		cdescription,
		cmessage,
		cfunction,
		cfile,
		C.int32_t(line),
		C.char(boolToByte(notifyEditor)),
	)
	return nil
}

func (me *extension) callInterfacePrintWarning(description, function, file string, line int32, notifyEditor bool) error {
	cdescription := cstring(description)
	defer cfree(unsafe.Pointer(cdescription))

	cfunction := cstring(function)
	defer cfree(unsafe.Pointer(cfunction))

	cfile := cstring(file)
	defer cfree(unsafe.Pointer(cfile))

	fnPtr, err := getProcAddressFor[types.InterfacePrintError](me, "print_warning")
	if err != nil {
		return err
	}
	C.go_dot_gdextension_print_warning(
		fnPtr,
		cdescription,
		cfunction,
		cfile,
		C.int32_t(line),
		C.char(boolToByte(notifyEditor)),
	)
	return nil
}

func (me *extension) callInterfacePrintWarningWithMessage(description, message, function, file string, line int32, notifyEditor bool) error {
	cdescription := cstring(description)
	defer cfree(unsafe.Pointer(cdescription))

	cmessage := cstring(message)
	defer cfree(unsafe.Pointer(cmessage))

	cfunction := cstring(function)
	defer cfree(unsafe.Pointer(cfunction))

	cfile := cstring(file)
	defer cfree(unsafe.Pointer(cfile))

	fnPtr, err := getProcAddressFor[types.InterfacePrintError](me, "print_warning_with_message")
	if err != nil {
		return err
	}
	C.go_dot_gdextension_print_warning_with_message(
		fnPtr,
		cdescription,
		cmessage,
		cfunction,
		cfile,
		C.int32_t(line),
		C.char(boolToByte(notifyEditor)),
	)
	return nil
}

func (me *extension) callInterfaceVariantGetPtrDestructor(pType types.VariantType) (types.InterfaceVariantGetPtrDestructor, error) {
	fnPtr, err := getProcAddressFor[types.InterfaceVariantGetPtrDestructor](me, "variant_get_ptr_destructor")
	if err != nil {
		return nil, err
	}
	ptr := C.go_dot_gdextension_variant_get_ptr_destructor(
		fnPtr,
		C.int(pType),
	)
	return types.InterfaceVariantGetPtrDestructor(ptr), nil
}

func (me *extension) callInterfaceVariantGetPtrConstructor(pType types.VariantType, pConstructor int32) (types.InterfaceVariantGetPtrConstructor, error) {
	fnPtr, err := getProcAddressFor[types.InterfaceVariantGetPtrConstructor](me, "variant_get_ptr_constructor")
	if err != nil {
		return nil, err
	}
	me.Logf(LogLevelDebug, "calling variant_get_ptr_constructor for type %d and constructor %d", pType, pConstructor)
	ptr := C.go_dot_gdextension_variant_get_ptr_constructor(
		fnPtr,
		C.int(pType),
		C.int32_t(pConstructor),
	)
	return types.InterfaceVariantGetPtrConstructor(ptr), nil
}

func (me *extension) callInterfaceGetVariantFromTypeConstructor(pType types.VariantType) (types.InterfaceGetVariantFromTypeConstructor, error) {
	fnPtr, err := getProcAddressFor[types.InterfaceGetVariantFromTypeConstructor](me, "get_variant_from_type_constructor")
	if err != nil {
		return nil, err
	}
	ptr := C.go_dot_gdextension_get_variant_from_type_constructor(
		fnPtr,
		C.int(pType),
	)
	return types.InterfaceGetVariantFromTypeConstructor(ptr), nil
}

func (me *extension) callInterfaceStringNewWithUTF8Chars(rDest types.UninitializedStringPtr, pContents string) error {
	ccontents := cstring(pContents)
	defer cfree(unsafe.Pointer(ccontents))

	fnPtr, err := getProcAddressFor[types.InterfaceGetVariantFromTypeConstructor](me, "string_new_with_utf8_chars")
	if err != nil {
		return err
	}
	C.go_dot_gdextension_string_new_with_utf8_chars(
		fnPtr,
		unsafe.Pointer(rDest),
		ccontents,
	)
	return nil
}

func (me *extension) callInterfaceVariantGetPtrUtilityFunction(pFunction *C.StringName, pHash int) (types.PtrUtilityFunction, error) {
	fnPtr, err := getProcAddressFor[types.InterfaceVariantGetPtrUtilityFunction](me, "variant_get_ptr_utility_function")
	if err != nil {
		return nil, err
	}
	return types.PtrUtilityFunction(C.go_dot_gdextension_variant_get_ptr_utility_function(
		fnPtr,
		unsafe.Pointer(pFunction),
		C.int(pHash),
	)), nil
}

func (me *extension) callInterfaceVariantDestroy(pSelf types.VariantPtr) error {
	fnPtr, err := getProcAddressFor[types.InterfaceVariantGetPtrUtilityFunction](me, "variant_destroy")
	if err != nil {
		return err
	}
	C.go_dot_gdextension_variant_destroy(
		fnPtr,
		unsafe.Pointer(pSelf),
	)
	return nil
}

func (me *extension) makeString(contents string) (*C.String, func() error, error) {
	stringDtr, err := me.callInterfaceVariantGetPtrDestructor(types.VariantTypeString)
	if err != nil {
		return nil, nil, err
	}

	str := (*C.String)(C.malloc(C.sizeof_String))
	err = me.callInterfaceStringNewWithUTF8Chars(types.UninitializedStringPtr(str), contents)
	if err != nil {
		return nil, nil, err
	}
	return str, func() error {
		me.callVariantDestructor(stringDtr, unsafe.Pointer(str))
		cfree(unsafe.Pointer(str))
		return nil
	}, nil
}

func (me *extension) makeStringName(contents string) (*C.StringName, func() error, error) {
	stringNameCtr, err := me.callInterfaceVariantGetPtrConstructor(types.VariantTypeStringName, 2)
	if err != nil {
		return nil, nil, err
	}

	stringNameDtr, err := me.callInterfaceVariantGetPtrDestructor(types.VariantTypeStringName)
	if err != nil {
		return nil, nil, err
	}

	str, clean, err := me.makeString(contents)
	if err != nil {
		return nil, nil, err
	}
	defer clean()

	strName := (*C.StringName)(C.malloc(C.sizeof_StringName))
	me.callVariantConstructor(stringNameCtr, unsafe.Pointer(strName), [1]types.ConstTypePtr{types.ConstTypePtr(str)})
	return strName, func() error {
		me.callVariantDestructor(stringNameDtr, unsafe.Pointer(strName))
		cfree(unsafe.Pointer(strName))
		return nil
	}, nil
}

func (me *extension) makeStringVariant(contents string) (*C.Variant, func() error, error) {
	variantCtr, err := me.callInterfaceGetVariantFromTypeConstructor(types.VariantTypeString)
	if err != nil {
		return nil, nil, err
	}

	str, clean, err := me.makeString(contents)
	if err != nil {
		return nil, nil, err
	}

	strVariant := (*C.Variant)(C.malloc(C.sizeof_Variant))
	me.callVariantTypeConstructor(variantCtr, strVariant, unsafe.Pointer(str))
	return strVariant, func() error {
		err := clean()
		if err != nil {
			return err
		}
		err = me.callInterfaceVariantDestroy(types.VariantPtr(strVariant))
		if err != nil {
			return err
		}
		cfree(unsafe.Pointer(strVariant))
		return nil
	}, nil
}

func (me *extension) callVariantConstructor(constructor types.InterfaceVariantGetPtrConstructor, variant unsafe.Pointer, args [1]types.ConstTypePtr) {
	C.go_dot_gdextension_call_variant_constructor(
		constructor,
		variant,
		unsafe.Pointer(&args[0]),
		C.int(len(args)),
	)
}

func (me *extension) callVariantTypeConstructor(constructor types.InterfaceGetVariantFromTypeConstructor, variant *C.Variant, inside unsafe.Pointer) {
	C.go_dot_gdextension_call_variant_type_constructor(
		constructor,
		unsafe.Pointer(variant),
		inside,
	)
}

func (me *extension) callVariantDestructor(destructor types.InterfaceVariantGetPtrDestructor, variant unsafe.Pointer) {
	C.go_dot_gdextension_call_variant_destructor(
		destructor,
		variant,
	)
}

func (me *extension) callUtilityFunction(function types.PtrUtilityFunction, args []types.ConstVariantPtr) {
	C.go_dot_gdextension_call_utility_function(
		function,
		nil,
		unsafe.Pointer(&args[0]),
		C.int(len(args)),
	)
}

func (me *extension) callPrint(message string) error {
	printNamePtr, clean, err := me.makeStringName("print")
	if err != nil {
		return err
	}
	defer clean()

	msgPtr, clean, err := me.makeStringVariant(message)
	if err != nil {
		return err
	}
	defer clean()

	printPtr, err := me.callInterfaceVariantGetPtrUtilityFunction(printNamePtr, 2648703342)
	if err != nil {
		return err
	}

	me.callUtilityFunction(printPtr, []types.ConstVariantPtr{types.ConstVariantPtr(msgPtr)})
	return nil
}

//export go_dot_gdextension_class_create_instance
func go_dot_gdextension_class_create_instance(pUserData unsafe.Pointer) unsafe.Pointer {
	class, err := restore[*classEntry](pUserData)
	if err != nil {
		log.Fatalf("could not restore class entry: %s", err.Error()) // FIXME: should not panic
	}

	obj, err := class.ext.callInterfaceClassdbConstructObject(class.class.ParentClassName())
	if err != nil {
		log.Fatalf("could not create object for class %q: %s", class.class.ClassName(), err.Error()) // FIXME: should not panic
	}

	id, err := class.ext.callInterfaceObjectGetInstanceID(obj)
	if err != nil {
		log.Fatalf("could not get instance id for class %q: %s", class.class.ClassName(), err.Error()) // FIXME: should not panic
	}

	err = class.ext.callInterfaceObjectSetInstance(obj, class.class.ClassName(), types.ClassInstancePtr(&id))
	if err != nil {
		log.Fatalf("could not set instance for class %q: %s", class.class.ClassName(), err.Error()) // FIXME: should not panic
	}

	class.addInstance(uint64(id))
	return unsafe.Pointer(obj)
}

//export go_dot_gdextension_class_free_instance
func go_dot_gdextension_class_free_instance(pUserData unsafe.Pointer, pInstance unsafe.Pointer) {
	class, err := restore[*classEntry](pUserData)
	if err != nil {
		log.Fatalf("could not restore class entry: %s", err.Error()) // FIXME: should not panic
	}

	id := *(*uint64)(pInstance)
	class.deleteInstance(uint64(id))
}
